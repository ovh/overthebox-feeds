#!/bin/sh
# shellcheck disable=SC1091,SC1090
# vim: set noexpandtab tabstop=4 shiftwidth=4 softtabstop=4 :

[ -n "$1" ] || exit

. /lib/functions.sh
. /lib/overthebox

# retrieve args
OTB_TRACKER_INTERFACE="$1"
shift

# export vars
export OTB_TRACKER_INTERFACE
export OTB_TRACKER_HOST
export OTB_TRACKER_TIMEOUT
export OTB_TRACKER_STATUS
export OTB_TRACKER_RESULT
export OTB_TRACKER_DEVICE
export OTB_TRACKER_DEVICE_IP
export OTB_TRACKER_DEVICE_GATEWAY

# set DSCP CS7 (56) in outgoing packets
dscp=56

# set constants for rto updating
# we've changed the default values of the RFC to K=3 and beta=0.25 instead of K=4 and beta=0.125
# this allows us to lower the gap between rtt and rto when the latency increases quickly as our
# measurements are less frequent than the standard timeout computation of the TCP stack

srtt=
rttvar=
rto_init=$(( OTB_TRACKER_TIMEOUT * 1000 ))
rto=$rto_init

# update rto as explained in rfc6298
# rto    : retransmission timeout.
# rtt    : round trip time
# rttvar : round trip time variance
# srtt   : smoothed round trip time
# alpha  : smoothing coeff for srtt
# beta   : smoothing coeff for rttvar
# K      : coeff to increase rttvar impact on rto computation
_update_rto() {
	if [ -z "$srtt" ]; then
		srtt=$1
		rttvar=$(($1 / 2))
	else
		diff=$((srtt - $1))
		rttvar=$(((75 * rttvar + 25 * (diff >= 0 ? diff : -diff)) / 100))
		srtt=$(((75 * srtt + 25 * $1) / 100))
	fi
	rto=$((tmp = srtt + 3 * rttvar, tmp > rto_init ? tmp : rto_init))
}

config_load network
OTB_TRACKER_DEVICE= ; config_get OTB_TRACKER_DEVICE "$OTB_TRACKER_INTERFACE" ifname
OTB_TRACKER_TABLE=  ; config_get OTB_TRACKER_TABLE "$OTB_TRACKER_INTERFACE" ip4table

# main loop
while true; do
	# setup tracker variables
	OTB_TRACKER_DEVICE_IP=
	OTB_TRACKER_DEVICE_GATEWAY=
	OTB_TRACKER_STATUS="ERROR"
	OTB_TRACKER_RESULT=
	OTB_TRACKER_TIMEOUT=$((rto / 1000 + (rto % 1000 ? 1 : 0)))

	# retrieve iface ip and gateway and device
	OTB_TRACKER_DEVICE_IP=$(ip -4 -o addr show "$OTB_TRACKER_DEVICE" | awk '{ print substr($4, 1, length($4) - 3) }')
	[ -n "$OTB_TRACKER_TABLE" ] && \
		OTB_TRACKER_DEVICE_GATEWAY=$(ip -4 -o route show table "$OTB_TRACKER_TABLE" | awk 'NR==1 {if($1 == "default") print $3}')

	# execute specific tracker
	if [ -n "$OTB_TRACKER_DEVICE" ] && [ -n "$OTB_TRACKER_DEVICE_IP" ] && [ -n "$OTB_TRACKER_DEVICE_GATEWAY" ];then
		# setup loop variable
		tries="$OTB_TRACKER_TRIES"
		# loop until tries attempts have been reached
		while [ "$tries" -gt 0 ]; do
			t1=$(date +%s%3N)
			OTB_TRACKER_RESULT=$(dig \
				@"$OTB_TRACKER_HOST" \
				-b "$OTB_TRACKER_DEVICE_IP" \
				+time="$OTB_TRACKER_TIMEOUT" \
				+dscp="$dscp" \
				+tries=1 \
				+short "$@"
			) && [ "$OTB_TRACKER_RESULT" = "127.6.8.4" ] && {
				# tracking command succeed
				t2=$(date +%s%3N)
				_update_rto "$((t2 - t1))"
				OTB_TRACKER_STATUS="OK"
				break
			}
			tries=$((tries - 1))
			OTB_TRACKER_TIMEOUT=$((OTB_TRACKER_TIMEOUT * 2))
		done
	fi

	# post tracking
	for tracker_bin in /usr/share/otb/post-tracking.d/*; do
		[ -x "$tracker_bin" ] && (
			_log() {
				logger -t "post-tracking-${tracker_bin##*/}" "$*"
			}
			. "$tracker_bin"
		)
	done

	sleep "$OTB_TRACKER_INTERVAL"
done
