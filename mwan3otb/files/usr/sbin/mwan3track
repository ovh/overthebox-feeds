#! /usr/bin/env lua
-- vim: set expandtab tabstop=2 shiftwidth=2 softtabstop=2 :

local p      = require "posix"
local sig    = require "posix.signal"
local socket = require "socket"
local http   = require "socket.http"
local ltn12  = require "ltn12"
local json   = require "luci.json"
local libuci = require "luci.model.uci"
local sys    = require "luci.sys"
local math   = require "math"
local ping   = require "ping"

math.randomseed(os.time())

local method -- ping function bindings
local icmp_method -- ping icmp

http.TIMEOUT = 5

local shaper = {}

p.openlog("track")

function log(str)
  if str then p.syslog(p.LOG_NOTICE, opts["i"]..'.'..str) end
end

function debug(str)
  if str then p.syslog(p.LOG_DEBUG, opts["i"]..'.'..str) end
end

sig.signal(sig.SIGUSR1, function ()
  if shaper.interface and shaper.interface ~= "tun0" then
    shaper.reloadtimestamp = os.time()
  end
end)

sig.signal(sig.SIGUSR2, function ()
  if shaper.interface and shaper.interface == "tun0" then
    shaper.reloadtimestamp = os.time()
  end
end)

function create_socket(interface, kind)
  local s, ok, err
  if kind == "stream" then
    s = socket.tcp()
    if s then ok, err = s:bind('*', 0) end
  elseif kind == "datagram" then
    s = socket.udp()
    if s then ok, err = s:setsockname('*', 0) end
  else
    err = "unknown kind"
  end
  if ok then
    ok, err = p.setsockopt(s:getfd(), p.SOL_SOCKET, p.SO_BINDTODEVICE, interface)
  end
  if not ok then
    log("create_socket: "..err)
    if s then s:close() end
    return nil
  end
  return s
end

function dns_query(id, domain)
  local query = {}
  table.insert(query, id)
  table.insert(query, "\1\0") -- Query, RD
  table.insert(query, "\0\1") -- QDCOUNT
  table.insert(query, "\0\0") -- ANCOUNT
  table.insert(query, "\0\0") -- NSCOUNT
  table.insert(query, "\0\0") -- ARCOUNT
  for word in string.gmatch(domain, '([^.]+)') do
    table.insert(query, string.char(#word))
    table.insert(query, word)
  end
  table.insert(query, "\0")   -- end of QNAME
  table.insert(query, "\0\1") -- QTYPE  = A RECORD
  table.insert(query, "\0\1") -- QCLASS = IN
  return table.concat(query)
end

function dns_request(host, interface, timeout, domain, match)
  local s = create_socket(interface, "datagram")
  if not s then
    return false, "dns_request: no socket"
  end
  s:settimeout(timeout)
  local ok, err = s:setpeername(host, "53")
  if not ok then
    s:close()
    return false, "dns_request: "..err
  end
  local id = string.char(math.random(0xFF), math.random(0xFF))
  local ok, err = s:send(dns_query(id, domain))
  if not ok then
    s:close()
    return false, "dns_request: "..err
  end
  local t1 = socket.gettime()
  local data, err = s:receive()
  local t2 = socket.gettime()
  s:close()
  if not data then
    return false, "dns_request: "..err
  end
  if id >= data or not string.find(data, match, 1, true) then
    return false, "dns_request: bad answer"
  end
  local dt = (t2-t1)*1000
  if dt <= 1 then
    log("dns proxy/cache detected, falling back to ICMP ping method")
    method = icmp_method
    return false, "dns_request: proxy/cache detected"
  end
  return true, dt
end

function get_public_ip(interface)
  local data = {}
  local status, code, headers = http.request{
    url = "http://ifconfig.ovh",
    create = function() return create_socket(interface, "stream") end,
    sink = ltn12.sink.table(data)
  }
  if status == 1 and code == 200 then
    return table.concat(data):match("(%d+%.%d+%.%d+%.%d+)")
  end
end

function whois_host(interface, host, ip)
  local s = create_socket(interface, "stream")
  if not s then
    log("whois_host: no socket");
    return nil
  end
  s:settimeout(5)
  local ok, err = s:connect(host, "43")
  if ok then
    if host == "whois.arin.net" then
      s:send("n + "..ip.."\r\n")
    else
      s:send(ip.."\r\n")
    end
    local data, err = s:receive("*a")
    s:close()
    if data then
      local refer = data:match("refer:%s+([%w%.]+)")
      if refer then
        return whois_host(interface, refer, ip)
      end
      local netname = data:match("[Nn]et[Nn]ame:%s+([%w%.%-]+)")
      local country = data:match("[Cc]ountry:%s+([%w%.%-]+)")
      if netname and country then
        return {
          ["as_description"] = netname,
          ["as_country_code"] = country
        }
      end
    end
    log("whois_host: failed")
    return nil
  end
  s:close()
  log("whois_host: "..err)
  return nil
end

function whois(interface, ip)
  return whois_host(interface, 'whois.iana.org', ip)
end

function get_asn(interface, ip)
  local data = {}
  local status, code, headers = http.request{
    url = "http://api.iptoasn.com/v1/as/ip/"..ip,
    create = function() return create_socket(interface, "stream") end,
    sink = ltn12.sink.table(data)
  }
  if status == 1 and code == 200 then
    return json.decode(table.concat(data))
  end
  return whois(interface, ip)
end

local arguments = {
  {"help",        "none",     'h', "bool",   "this help message" },
  {"device",      "required", 'd', "string", "device to check" },
  {"interface",   "required", 'i', "string", "network interface to check"},
  {"method",      "optional", 'm', "string", "method to check : icmp (default), dns"},
  {"reliability", "required", 'r', "number", "how many success we have to consider the interface up"},
  {"count",       "required", 'c', "number", "count number of test we make"},
  {"timeout",     "required", 't', "number", "request timeout"},
  {"interval",    "required", 'v', "number", "interval between 2 requests"},
  {"down",        "required", 'o', "number", "how many test we failed before consider it's down"},
  {"up",          "required", 'u', "number", "how many test we succeed before consider it's up"}
}

function arguments:usage()
  print("Usage : track.lua arguments host")
  print("Arguments:")
  for k, v in pairs(arguments) do
    if type(v) == "table" then
      print(string.format("  -%s or --%-20s %-6s %s", v[3], v[1], v[4], v[5]))
    end
  end
  os.exit()
end

function arguments:short()
  local s = ""
  for k, v in pairs(arguments) do
    if type(v) == "table" then
      if v[4] == "bool" then
        s = s..v[3]
      else
        s = s..v[3]..':'
      end
    end
  end
  return s
end

function arguments:long()
  local s = {}
  for k, v in pairs(arguments) do
    if type(v) == "table" then
      table.insert(s, {v[1], v[2], v[3] })
    end
  end
  return s
end

function arguments:all_required_are_not_here(opt)
  for k, v in pairs(arguments) do
    if type(v) == "table" then
      if v[2] == "required" and  opt[ v[3] ] == nil then
        return false, v[1].." is missing"
      end
    end
  end
  return true
end

opts = {}
local last_index = 1
for r, optarg, optind, li in p.getopt(arg, arguments:short(), arguments:long()) do
  if r == '?' then return print  'unrecognized option' end
  last_index = optind
  opts[ r ] = optarg or true
end

servers = {}
for i = last_index, #arg do
  if string.find(arg[i], "%d+.%d+.%d+.%d+") then
    table.insert(servers, arg[i])
  else
    print("not reconize : "..arg[i])
  end
end

if opts["h"] then
  arguments:usage()
end

local ok, err = arguments:all_required_are_not_here(opts)
if not ok then
  arguments:usage()
end

if table.getn(servers) == 0 then
  print("no server found")
  arguments:usage()
end

icmp_method = function(s) return ping.send_ping(s , opts["i"], tonumber(opts["t"]) * 1000, 4) end
method = icmp_method

if opts["m"] == "dns" then
  method = function(s) return dns_request(s, opts["i"], tonumber(opts["t"]), "tracker.overthebox.ovh", string.char(127,6,8,4)) end
end

local fn = "/var/run/mwan3track-"..opts["i"]..".pid"
local fd, err = io.open(fn, 'r')
if fd then
  io.input(fd)
  local pid = io.read()
  io.close(fd)
  if pid and tonumber(pid) > 1 then p.kill(pid, sig.SIGTERM) end
end

local fd, err = io.open(fn, 'w')
io.output(fd)
io.write(p.getpid(), "\n")
io.close(fd)

os.execute("mkdir -p /tmp/tracker/if")

local nb_up = tonumber(opts["u"])
local nb_down = tonumber(opts["o"])

local init_score = nb_up + nb_down
local score = init_score
local host_up_count = 0
local lost = 0

function run(command)
  debug("execute: "..command)
  os.execute(command)
end

-- Interface info structure
local interface = {}
interface.name      = opts["i"]
interface.device    = opts["d"]
interface.wanaddr   = false
interface.whois     = false
interface.country   = false
interface.timestamp = nil

function updateInterfaceInfos()
  local wanaddr = get_public_ip(interface.name)
  if wanaddr then
    debug("wan address is: "..wanaddr)
    interface.timestamp = os.time()
    if interface.wanaddr ~= wanaddr then
      interface.wanaddr = wanaddr
      res = get_asn(interface.name, interface.wanaddr)
      if res then
        if res.as_description ~= nil then
          interface.whois = string.match(res.as_description, "[^%s]+")
        end
        interface.country = res.as_country_code
        if interface.whois and interface.country then
          debug("whois of "..wanaddr.." is "..interface.whois.." and country is "..interface.country)
        elseif interface.whois then
          debug("whois of "..wanaddr.." is "..interface.whois)
        end
        -- Update uci infos
        local uci = libuci.cursor()
        if interface.name == "tun0" or interface.name == "xtun0" then
          if interface.whois and interface.country then
            uci:set("network", interface.name, "label", string.format('%s-%s', interface.country, interface.whois))
            uci:save("network")
            uci:commit("network")
          elseif interface.whois then
            uci:set("network", interface.name, "label", interface.whois)
            uci:save("network")
            uci:commit("network")
          end
        elseif not uci:get("network", interface.name, "label") then
          uci:set("network", interface.name, "label", interface.whois)
          uci:save("network")
          uci:commit("network")
        end
      end
      return true
    end
  end
  return false
end

local pingstats = {}

pingstats.last = 0
pingstats.min  = 0
pingstats.avg  = 0

function pingstats:push(value)
  if value <= 0 then
    return
  end

  if pingstats.last == 0 then
    pingstats.min = value
    pingstats.avg = value
  else
    if value < pingstats.min then
      pingstats.min = value
    end

    pingstats.avg = (7*pingstats.avg + value)/8
  end

  pingstats.last = value
end

-- Service API helpers

function POST(uri, data)
  return API(uri, "POST", data)
end

function PUT(uri, data)
  return API(uri, "PUT", data)
end

function DELETE(uri, data)
  return API(uri, "DELETE", data)
end

function API(uri, method, data)
  -- url = "http://api/"..uri : we do not use the dns "api" beacause of the dnsmasq reloading race condition
  url = "http://169.254.254.1/"..uri
  -- Buildin JSON POST
  local reqbody   = json.encode(data)
  local respbody  = {}
  -- Building Request
  local body, code, headers, status = http.request{
    method = method,
    url = url,
    protocol = "tlsv1",
    headers = {
      ["Content-Type"] = "application/json",
      ["Content-length"] = reqbody:len(),
      ["X-Auth-OVH"] = libuci.cursor():get("overthebox", "me", "token"),
    },
    source = ltn12.source.string(reqbody),
    sink = ltn12.sink.table(respbody),
  }
  log(method..' api/'..uri..' '..reqbody..' '..code)
  return code, json.decode(table.concat(respbody))
end

-- Initializing Shaping object

(function ()
  local uci = libuci.cursor()
  shaper.interface      = opts["i"]
  shaper.mode           = uci:get("network", shaper.interface, "trafficcontrol") or "off" -- auto, static
  shaper.mindownload    = tonumber(uci:get("network", shaper.interface, "mindownload")) or 512 -- kbit/s
  shaper.minupload      = tonumber(uci:get("network", shaper.interface, "minupload")) or 128 -- kbit/s
  shaper.qostimeout     = tonumber(uci:get("network", shaper.interface, "qostimeout")) or 30 -- min
  shaper.ratefactor     = tonumber(uci:get("network", shaper.interface, "ratefactor")) or 1 -- 0.9 mean 90%
  -- Shaper timers
  shaper.reloadtimestamp    = 0   -- Time when signal to (re)load qos was received
  shaper.qostimestamp       = nil -- Time of when QoS was enabled, nil mean that QoS is disabled
end)()

-- Shaper functions

function shaper:ping()
  -- When tun0 started (or is notified about a new tracker), notify all trackers to start their QoS
  if shaper.interface == "tun0" then
    if shaper.qostimestamp == nil or (shaper.reloadtimestamp > shaper.qostimestamp) then
      shaper:enableQos()
      run('pkill -USR1 -f "mwan3track -i"')
    end
    -- Notify tun0 that a new tracker as started pinging
  elseif shaper.reloadtimestamp == 0 then
    run('pkill -USR2 -f "mwan3track -i tun0"')
  end
end

function shaper:update()
  -- A reload of qos has been asked
  if shaper.reloadtimestamp and ((shaper.qostimestamp == nil) or (shaper.reloadtimestamp > shaper.qostimestamp)) then
    -- Reload uci
    local uci = libuci.cursor()
    local newMode = uci:get("network", shaper.interface, "trafficcontrol") or "off" -- auto, static
    -- QoS mode has changed
    if shaper.mode ~= newMode then
      shaper.mode = newMode
      shaper:disableQos()
    end
    -- Update values
    shaper.mindownload    = tonumber(uci:get("network", shaper.interface, "mindownload")) or 512 -- kbit/s
    shaper.minupload      = tonumber(uci:get("network", shaper.interface, "minupload")) or 128 -- kbit/s
    shaper.qostimeout     = tonumber(uci:get("network", shaper.interface, "qostimeout")) or 30 -- min
    shaper.ratefactor     = tonumber(uci:get("network", shaper.interface, "ratefactor")) or 1 -- 0.9 mean 90%
  end
  --
  if shaper.mode == "auto" then
    local uci = libuci.cursor()
    if uci:get("network", shaper.interface, "upload") then
      shaper.upload = tonumber(uci:get("network", shaper.interface, "upload"))
    end
    if shaper.qostimestamp and shaper.qostimeout and (os.time() > (shaper.qostimestamp + shaper.qostimeout * 60)) then
      log(string.format("disabling download QoS after %s min", shaper.qostimeout))
      shaper:disableQos()
    end
  elseif shaper.mode == "static" then
    local uci = libuci.cursor()
    if shaper.qostimestamp == nil or (shaper.reloadtimestamp > shaper.qostimestamp) then
      shaper.upload   = tonumber(uci:get("network", shaper.interface, "upload"))
      shaper.download = tonumber(uci:get("network", shaper.interface, "download"))
      shaper:enableQos()
    end
  end
end

function shaper:enableQos()
  if shaper.qostimestamp == nil or (shaper.reloadtimestamp > shaper.qostimestamp) then
    shaper.qostimestamp = os.time()
    if shaper.interface == "tun0" then
      log(string.format("Reloading DSCP rules", shaper.interface))
      run(string.format("/etc/init.d/dscp reload %s", shaper.interface))
    else
      log(string.format("Enabling QoS on interface %s", shaper.interface))
      run(string.format("/usr/lib/qos/run.sh start %s", shaper.interface))
    end
    shaper:sendQosToApi()
  end
end

function shaper:disableQos()
  if shaper.qostimestamp then
    if shaper.interface ~= "tun0" then
      log(string.format("Disabling QoS on interface %s", shaper.interface))
      local uci = libuci.cursor()
      local mptcp  = uci:get("network", shaper.interface, "multipath")
      local metric = uci:get("network", shaper.interface, "metric")
      if mptcp == "on" or mptcp == "master" or mptcp == "backup" or mptcp == "handover" then
        if metric then
          local rcode, res = DELETE("qos/"..metric, {})
        end
      end
      run(string.format("/usr/lib/qos/run.sh stop %s", shaper.interface))
    end
    shaper.qostimestamp = nil
  end
end

function shaper:sendQosToApi()
  local uci   = libuci.cursor()
  local mptcp = uci:get("network", shaper.interface, "multipath")
  if shaper.interface == "tun0" then
    local commitid = tostring(os.time())
    uci:foreach("dscp", "classify", function (dscp)
      if dscp['direction'] == "download" or dscp['direction'] == "both" then
        if commitid then
          local rcode, res = POST("dscp/"..commitid, {
            proto     = dscp["proto"],
            src_ip    = dscp["src_ip"],
            src_port  = dscp["src_port"],
            dest_ip   = dscp["dest_ip"],
            dest_port = dscp["dest_port"],
            dpi       = dscp["dpi"],
            class     = dscp["class"]
          })
          -- On error, nil commid to kill dscp transaction
          if tostring(rcode):gmatch("200") == nil then
            commitid = nil;
          end
        end
      end
    end)
    if commitid then
      local rcode, res = POST("dscp/"..commitid.."/commit")
      if tostring(rcode):gmatch("200") then
        shaper.qostimestamp = os.time()
      else
        shaper.reloadtimestamp = os.time()
      end
    else
      shaper.reloadtimestamp = os.time()
    end
  elseif mptcp == "on" or mptcp == "master" or mptcp == "backup" or mptcp == "handover" then
    local rcode, res = PUT("qos", {
      interface = shaper.interface,
      metric    = uci:get("network", shaper.interface, "metric"),
      wan_ip    = interface.wanaddr or get_public_ip(shaper.interface),
      downlink  = tostring(shaper.download),
      uplink    = tostring(shaper.upload)
    })
    if tostring(rcode):gmatch("200") then
      shaper.qostimestamp = os.time()
    else
      shaper.reloadtimestamp = os.time()
    end
  end
end

function write_stats()
  local result = {}
  result[interface.name] = {}
  result[interface.name].wanaddr = interface.wanaddr
  result[interface.name].whois = interface.whois
  result[interface.name].country = interface.country
  -- Ping stats
  if pingstats then
    result[interface.name].minping = pingstats.min
    result[interface.name].curping = pingstats.last
    result[interface.name].avgping = pingstats.avg
  end
  -- QoS status
  if shaper then
    result[interface.name].qostimestamp       = shaper.qostimestamp
    result[interface.name].reloadtimestamp    = shaper.reloadtimestamp
    result[interface.name].upload             = shaper.upload
    result[interface.name].download           = shaper.download
    result[interface.name].qosmode            = shaper.mode
  end
  -- write file
  local file = io.open( string.format("/tmp/tracker/if/%s", interface.name), "w" )
  if file then
    file:write(json.encode(result))
    file:close()
  end
end

-- Main loop

while true do
  for i = 1, #servers do
    local ok, msg = method( servers[i] )
    if ok then
      host_up_count = host_up_count + 1

      -- Check public ip every 900 sec and reload QoS if public ip change
      if interface.timestamp == nil or (os.time() > interface.timestamp + 900) then
        if updateInterfaceInfos() and shaper.qostimestamp then
          shaper.reloadtimestamp = os.time()
        end
      end

      -- Update shaper
      shaper:ping()
      pingstats:push(tonumber(msg))
      debug("check: "..servers[i].." OK "..string.format("%.2f ms", pingstats.last))
    else
      lost = lost + 1

      log(msg)
      debug("check: "..servers[i].." failed")
    end
    write_stats()
    shaper:update()
  end

  if host_up_count < tonumber(opts["r"]) then
    score = score - 1
    if score < nb_up then score = 0 end
    if score == nb_up then
      log(string.format("Interface %s (%s) is offline", opts["i"], opts["d"]))
      -- exec hotplug iface
      run(string.format("/usr/sbin/track.sh ifdown %s %s", opts["i"], opts["d"]))
      -- Set interface info as obsolet
      interface.timestamp = nil
      -- clear QoS on interface down
      if shaper.mode ~= "off" then
        shaper:disableQos()
      end
      score = 0
    end
  else
    if score < init_score and lost > 0 then
      log(string.format("Lost %d ping(s) on interface %s (%s)", (lost * opts["c"]), opts["i"], opts["d"]))
    end

    score = score + 1
    lost = 0

    if score > nb_up then score = init_score end
    if score == nb_up then
      log(string.format("Interface %s (%s) is online", opts["i"], opts["d"]))
      -- exec hotplug iface
      run(string.format("/usr/sbin/track.sh ifup %s %s", opts["i"], opts["d"]))
    end
  end

  host_up_count = 0
  -- sleep interval asked
  p.sleep(opts["v"])
end
