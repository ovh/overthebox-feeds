#!/bin/sh
# vim: set noexpandtab tabstop=4 shiftwidth=4 softtabstop=4 :

MPTCP_HANDLED_STATES="
on
backup
handover
master
off
"

DNSMASQ_FILES="
/tmp/resolv.conf
/tmp/resolv.conf.auto
"

_log() {
	# 1.alert
	# 2.crit
	# 3.err
	# 4.warn
	# 5.notice
	# 6.info
	# 7.debug
	logger -t "hotplug-16-mwan3custom" -p $1 "$2"
}

# This function will add / delete a route to the shadowsocks server using a
# specific gateway on a given device. The routes will not be changed if there
# are already setup correctly.
# Params:
#   $1 Device
#   $2 Interface
#   $3 Action
_update_route() {
	local device=$1
	local interface=$2
	local action=$3
	if [ "$action" != "add" -a "$action" != "delete" ]; then
		_log 4 "invalid action: $action"
		return 1
	fi

	# Get IP and gateway
	local ip=$(uci -q get shadowsocks.proxy.server)
	local gw=$(uci -q get network.$interface.gateway)
	if [ -z "$ip" -o -z "$gw" ]; then
		_log 4 "missing IP ($ip) or gateway ($gw)"
		return 1
	fi

	# Check if the route exists
	local check=$(ip route show $ip via $gw dev $device)
	if [ -z "$check" -a "$action" = "delete" ]; then
		_log 7 "route already deleted for $ip via $gw on $interface (dev:$device)"
		return 0
	elif [ -n "$check" -a "$action" = "add" ]; then
		_log 7 "route already added for $ip via $gw on $interface (dev:$device)"
		return 0
	fi

	# 'ip route' won't let us create two routes to the same IP, even with
	# different gateways, if no metric is added as parameter. 'route' on the
	# other hand is less strict and allows us to do so.
	route $action $ip gw $gw dev $device
	_log 7 "route $action $ip gw $gw dev $device"

	return 0
}

_remove_dnsmasq_upstream() {
	_log 7 "removing $INTERFACE from upstreams in dnsmasq"
	for file in $DNSMASQ_FILES; do
		sed -i "/# Interface $1/,/# Interface/ s/nameserver /#nameserver /" $file
	done
}

_add_dnsmasq_upstream() {
	_log 7 "adding $INTERFACE from upstreams in dnsmasq"
	for file in $DNSMASQ_FILES; do
		sed -i "/# Interface $1/,/# Interface/ s/#nameserver /nameserver /" $file
	done
}

if [ -z "$INTERFACE" ]; then
	_log 3 "Missing interface"
	return 0
fi

DEVICE=$(uci -q get network.${INTERFACE}.ifname)
if [ -z "$DEVICE" ]; then
	_log 4 "Got an interface $INTERFACE with no device"
	return 0
fi

MULTIPATH=$(uci -q get network.${INTERFACE}.multipath)
[ "$MULTIPATH" = "master" ] && MULTIPATH="on"

# If the state is off, we have nothing to do so let's exit
[ "$MULTIPATH" = "off" ] && return 0

HANDLE=0
for state in $MPTCP_HANDLED_STATES; do
	if [ "$state" = "$MULTIPATH" ]; then
		HANDLE=1
		break
	fi
done
if [ "$HANDLE" = "0" ]; then
	_log 4 "Strange MPTCP state '$MULTIPATH' detected on interface ${INTERFACE}. Skipping..."
	return 0
fi

# TODO: deal with the up/down notifications to the API elsewhere
case "$ACTION" in
	ifup)
		_log 7 "ifup device $INTERFACE"
		_update_route $DEVICE $INTERFACE "add"

		_add_dnsmasq_upstream $INTERFACE

		_log 7 "multipath $DEVICE $MULTIPATH"
		multipath $DEVICE $MULTIPATH
		;;
	ifdown)
		_log 7 "ifdown device $INTERFACE"

		_log 7 "multipath $DEVICE off"
		multipath $DEVICE off

		_remove_dnsmasq_upstream $INTERFACE

		_update_route $DEVICE $INTERFACE "delete"
		;;
esac

return 0
