<%
-- Copyright 2016 OVH (OverTheBox@ovh.net)
-- Simon Lelievre (simon.lelievre@corp.ovh.com)
-- Sebastien Duponcheel (sebastien.duponcheel@ovh.net)
-- Cyrille Meichel (cyrille.meichel@corp.ovh.com)
--
-- This file is part of OverTheBox for OpenWrt.
--
--    OverTheBox is free software: you can redistribute it and/or modify
--    it under the terms of the GNU General Public License as published by
--    the Free Software Foundation, either version 3 of the License, or
--    (at your option) any later version.
--
--    OverTheBox is distributed in the hope that it will be useful,
--    but WITHOUT ANY WARRANTY; without even the implied warranty of
--    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--    GNU General Public License for more details.
--
--    You should have received a copy of the GNU General Public License
--    along with OverTheBox.  If not, see (http://www.gnu.org/licenses/)
-%>

<%+header%>

<%
    local uci = require("luci.model.uci").cursor()

    local device_id		= uci:get("overthebox", "me", "device_id")
	local service_id	= uci:get("overthebox", "me", "service")
    local wizardStack = 0

    local function wizard(title, width, height, status, id)
        local arrowLen = height / 3
<<<<<<< HEAD
        print("<svg class=\""..status.."\" style=\"left:"..wizardStack..";width:"..width.."\" id=\""..id.."\" data-container=\""..id.."Process\">")
=======
        print("<svg class=\""..status.."\" style=\"left:"..wizardStack..";width:"..width.."\" id=\""..id.."\">")
>>>>>>> 313b157... Add new register device wizard
        if (wizardStack == 0) then
            print("<path d=\"M 0 0 L "..(width - arrowLen).." 0 L "..width.." "..(height / 2).." L "..(width - arrowLen).." "..height.." L 0 "..height.." L 0 0\"/>")
            print("<text x=\"10%\" y=\"50%\" class=\"title\">" .. title .. "</text>")
        else
            print("<path d=\"M 0 0 L "..(width - arrowLen).." 0 L "..width.." "..(height / 2).." L "..(width - arrowLen).." "..height.." L 0 "..height.." L "..arrowLen.." "..(height / 2).." L 0 0\"/>")
            print("<text x=\"15%\" y=\"50%\" class=\"title\">" .. title .. "</text>")
        end
        print("</svg>")
        wizardStack = wizardStack + width - arrowLen
    end
%>

<link rel="stylesheet" type="text/css" href="<%=resource%>/ovh/css/ovh-common.css">
<link rel="stylesheet" type="text/css" href="<%=resource%>/ovh/css/overthebox_index.css">
<link rel="stylesheet" type="text/css" href="<%=resource%>/ovh/css/ovh-common.css">
<link rel="stylesheet" type="text/css" href="<%=resource%>/jquery-ui.min.css">
<script src="<%=resource%>/jquery-3.1.1.min.js"></script>
<script src="<%=resource%>/jquery-ui.min.js"></script>
<script src="<%=resource%>/js-cookie.js"></script>
<script src="<%=resource%>/sha1.js"></script>
<script src="<%=resource%>/view_scripts/globals.js"></script>
<script src="<%=resource%>/view_scripts/api.js"></script>
<script src="<%=resource%>/view_scripts/nuc.js"></script>
<<<<<<< HEAD
<script src="<%=resource%>/view_scripts/wizard.js"></script>
<script src="<%=resource%>/view_scripts/translations.js"></script>
=======
>>>>>>> 313b157... Add new register device wizard
<script src="<%=resource%>/view_scripts/overthebox/register_device.js"></script>

<div id="registerWizard" class="register" style="display:none">
    <h1>Bienvenue dans votre espace OverTheBox</h1>
    
    <div id="gettingDeviceId" class="alert alert-info">
        <p><%:Waiting for device ID%> ...</p>
        <div id="isConnectedSpinner"></div>
    </div>

    <!-- When not connected -->
    <div id="requireConnexion" class="alert alert-info">
        <div id="notConnectedMessage">
            <p><%:Installez facilement votre OverTheBox en 3 étapes%></p>
            <p><%:Vérifier qu'aucun autre modem ne soit branché à votre modem principal%>.</p>
            <svg version="1.1" class="jsFirstScheme" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="500px"></svg>
<<<<<<< HEAD
            <p><%:Pour associer OverTheBox à un service, merci de bien vouloir commencer par vous authentifier%><span rel="tooltip" class="help" title="<h4>Authentification</h4><p><%:vous allez être redirigé ver une page nommée <strong>Permission to access your account</strong>. Veuillez cliquer sur le bouton <strong>Authorize Access</strong> pour vous authentifier.%></p>">?</span></p>.
=======
            <p><%:Pour associer OverTheBox à un service, merci de bien vouloir commencer par vous authentifier%>.</p>
>>>>>>> 313b157... Add new register device wizard
        </div>
        <div id="connectedMessage">
            <p><%:Installer facilement votre OverTheBox en 3 étapes%></p>
            <p><%:Vérifier qu'aucun autre modem ne soit branché à votre modem principal%>.</p>
            <svg version="1.1" class="jsFirstScheme" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="500px"></svg>
            <p><%:Votre OverTheBox est associée à un service %><strong id="serviceId"></strong>.</p>
            <p><%:Connectez-vous pour modifier la configuration matérielle%>.</p>
        </div>
<<<<<<< HEAD
        <p><strong><%:Vous allez être redirigé vers une page d'authentification%><span rel="tooltip" class="help" title="<h4>Authentification</h4><p><%:vous allez être redirigé ver une page nommée <strong>Permission to access your account</strong>. Veuillez cliquer sur le bouton <strong>Authorize Access</strong> pour vous authentifier.%></p>">?</span>.</strong></p>
=======
        <p><strong><%:Vous allez être redirigé vers une page d'authentification%>.</strong></p>
>>>>>>> 313b157... Add new register device wizard
        <button id="registerButton" class="btn btn-primary"><%:S'authentifier%></button>
        <div style="margin-top:20px">
            <a id="overviewMode" href="<%=pcdata(luci.dispatcher.build_url("admin/overthebox/overview"))%>#force"><%:Quitter l'assistant%></a>
        </div>
    </div>

    <!-- When connected -->
    <div id="connexionDone">
        <p><%:Bonjour%> <span class="fullName"></span> (<a id="disconnect" href="#"><%:Déconnexion%></a>),</p>

        <div class="wizard">
            <% --[[ wizard(translate("Sécurité"), 130, 40, "todo", "passwordSetup") --]] %>
            <% wizard(translate("Votre service"), 130, 40, "todo", "serviceChoice") %>
            <% wizard(translate("Désactiver le DHCP"), 180, 40, "todo", "dhcpDesactivate") %>
            <% wizard(translate("Modems supplémentaires"), 260, 40, "todo", "dhcpDesactivateMore") %>
        </div>

        <div id="messageContainer"></div>

        <div id="process">

            <!-- Password -->
<<<<<<< HEAD
            <!--<div id="passwordSetupProcess">
=======
            <div id="passwordSetupProcess">
>>>>>>> 313b157... Add new register device wizard
                <div class="alert alert-info config">
                    <p><%:Choisissez un mot de passe pour sécuriser l’accès à votre OverTheBox%>.</p>
                    <p><%:Votre mot de passe doit contenir, au minimum, 8 caractères alphanumériques et contenir au moins une majuscule et une minuscule%>.</p>
                    <div class="container">
                        <div class="row">
                            <div class="col-md-4">
                                <form id="passwordSetForm">
                                    <div class="form-group" id="passGpFirst">
                                        <input type="password" class="form-control" id="passwordInput" placeholder="<%:Mot de passe%>">
                                        <label class="control-label control-message" id="passErrorLong"><%:Le mot de passe doit contenir, au minimum, 8 caractères%></label>
                                        <label class="control-label control-message" id="passErrorComplex"><%:Le mot de passe doit contenir au moins une majuscule et une minuscule%></label>
                                    </div>
                                    <div class="form-group" id="passGpSecond">
                                        <input type="password" class="form-control" id="passwordInput2" placeholder="<%:Confirmez%>">
                                        <label class="control-label control-message" id="passErrorSame"><%:Les mots de passe ne sont pas identiques%></label>
                                    </div>
                                    <button id="passwordSetSubmit" type="submit" class="btn btn-primary"><%:Valider%> <span id="passwordSetSpinner"></span></button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
<<<<<<< HEAD
            </div>-->
=======
            </div>
>>>>>>> 313b157... Add new register device wizard

            <!-- Link service to Device -->
            <div id="serviceChoiceProcess">
                <div class="alert alert-info config">
                    <div id="getServicesSpinner"></div>
                    <form id="activateServiceForm">
                        <div class="form-group serviceList">
                            <label class="serviceList form-control-label" for="serviceList"><%:Sélectionnez le service que vous souhaitez associer à votre OverTheBox%></label>
                            <p class="uniqueService">
                                <%:Associez votre service OTB%>
                                <strong class="customerDescription"></strong>
                                (<em class="serviceName"></em>)
                                <%:à l'OverTheBox.%>
                            </p>
                            <div class="noService">
                                <p>
                                    <%:Aucun service OverTheBox n'a été trouvé sur votre compte%>.
                                    <%:Rendez-vous sur la page de commande de service%>.
                                    </p>
                                <a href="https://www.ovhtelecom.fr/commande/overthebox.xml?quantity=0&serviceQuantity=1" class="btn btn-primary" target="_blank"><%:Commander%></a>
                            </div>
                        </div>
                        
                        <button id="serviceActivateSubmit" type="submit" class="btn btn-primary"><%:Associer%> <span id="associateServiceSpinner"></span></button>
                    </form>
                    <div id="releaseService">
<<<<<<< HEAD
                            <p><%:Un appareil est déjà associé à ce service. Il s’agit peut-être de la même OverTheBox si cette dernière a été réinitialisée.
Souhaitez-vous remplacer la précédente association ?%></p>
                            <button class="btn no" role="button"><%:Annuler%></button>
                            <button class="btn btn-primary yes" role="button"><%:Continuer%></button>
                        </div>
                </div>
                <div class="alert alert-info done">
                    <div class="skip">
                        <p><%:Votre matériel est déjà lié au service%> <span></span>.</p>
                        <button role="button" class="btn btn-primary next" href="#"><%:Continuer%></a>
                    </div>
                    <div id="needActivate">
                        <p><%:Votre service doit être activé. Cela peut prendre quelques minutes.%></p>
                        <p class="progression"><%:Patientez%> <span></span></p>
                        <button id="serviceLinked" role="button" class="btn btn-primary" href="#"><%:Activer Le service%></a>
                    </div>
=======
                            <p><%:Ce service est déjà associé à un appareil. Vous devez d'abord le désassocier%>.</p>
                            <button class="btn btn-primary yes" role="button"><%:Oui%></button>
                            <button class="btn no" role="button"><%:Non%></button>
                        </div>
                </div>
                <div class="alert alert-info done">
                    <p class="skip"><%:Votre matériel est déjà lié au service%> <span></span>.</p>
                    <button id="serviceLinked" role="button" class="btn btn-primary next" href="#"><%:Continuer%></a>
>>>>>>> 313b157... Add new register device wizard
                </div>
            </div>

            <!-- Configure first modem -->
            <div id="dhcpDesactivateProcess">
                <svg version="1.1" id="firstModemScheme" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="500px"></svg>
                <div class="alert alert-info not-ready">
                    <p><%:Auncun modem n'a été detecté sur votre OverTheBox. Veuillez le brancher%>.</p>
                    
                </div>
                <div class="alert alert-info config">
                     <p><%:Il est obligatoire de désactiver le DHCP de votre modem afin qu'OverTheBox puisse fonctionner%>.<span rel="tooltip" class="help" title="<h4>DHCP</h4><p><%:C'est un protocole qui permet à un organe réseau d'obtenir dynamiquement une adresse IP. Cela permet de simplifier la configuration réseau.%></p><p><%:Par abus de langage, on appelle DHCP le server qui attribue dynamiquement ces adresses IP.%></p>">?</span></p>
                    <p><%:Les étapes à suivre%>:</p>
                    <ol>
                        <li>
                            <%:Désactivez le DHCP de votre modem%><br>
                            <span><%:Comment faire%> ?</span>
                            <a href="https://www.ovh.com/fr/g2238.1" target="_blank"><%:Suivez le guide%></a>
                        </li>
                        <li>
                            <%:Vérifier que votre DHCP est désactivé%><br>
                            <span class="note"><%:Cette opération dure en moyenne 30 secondes%>.</span><br>
                            <button id="mainDhcpCheck" role="button" class="btn btn-primary jsDhcpCheck">
                                <%:Vérifier%>
                                <span class="percent"></span>
                            </button>
                        </li>
                    </ol>
                </div>
                <div class="alert alert-info done">
                    <p><%:Afin qu'OverTheBox soit opérationelle et que votre réseau soit sécurisé, reconnectez votre ordinateur à l'OverThebox%>.</p>
                    <p><%:Procédez ainci%>:</p>
                    <p><strong><%:En Ethernet RJ45%> : </strong><%:Débranchez et rebranchez le câble RJ45%></p>
                    <p><strong><%:En Wifi%> : </strong><%:Coupez le Wifi et réactivez-le%></p>
                    <button id="testPublicIp" role="button" class="btn btn-primary" href="#"><%:Tester%></a>
                    <button id="gotoAdditionalModem" role="button" class="btn btn-primary next" href="#"><%:Continuer%></a>
                </div>
            </div>

            <!-- Configure aditional modems -->
            <div id="dhcpDesactivateMoreProcess">
                <svg version="1.1" id="additionalModemScheme" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="500px"></svg>
                <div class="alert alert-info not-ready">
                    <p><%:Si vous souhaitez ajouter une connexion, branchez votre modem supplémentaire selon le schéma, sinon quittez l'assistant.%></p>
                    <p><%:Afin de garantir une qualité de service optimale, personnalisez la répartition de votre trafic en fonction de vos applications et de votre bande passante%>. <a target="_blank" href="https://www.ovh.com/fr/g2246.0"><%:Suivez le guide%></a></p>
<<<<<<< HEAD
                    <button id="modemPlugged" role="button" class="btn btn-primary"><%:J'ai  branché mon modem%></button>
                    <a class="btn btn-primary pull-right" href="<%=pcdata(luci.dispatcher.build_url("admin/overthebox/overview"))%>"><%:Quitter l'assistant%></a>
=======
                    <a class="btn btn-primary" href="<%=pcdata(luci.dispatcher.build_url("admin/overthebox/overview"))%>"><%:Quitter l'assistant%></a>
>>>>>>> 313b157... Add new register device wizard
                </div>
                <div class="alert alert-info config">
                    <p><%:Les étapes à suivre pour désactiver le DHCP%>:</p>
                    <ol>
                        <li>
                            <%:Désactivez le DHCP de votre modem%><br>
                            <span><%:Comment faire%> ?</span>
                            <a href="https://www.ovh.com/fr/g2238.1" target="_blank"><%:Suivez le guide%></a>
                        </li>
                        <li>
                            <%:Vérifier que votre DHCP est désactivé%><br>
                            <span class="note"><%:Cette opération dure en moyenne 30 secondes.%></span><br>
<<<<<<< HEAD
                            <button id="additionalDhcpCheck" role="button" class="btn btn-primary jsDhcpCheck">
                                <%:Vérifier%>
                                <span class="percent"></span>
=======
                            <button id="additionalDhcpCheck" role="button" class="btn btn-primary btn-mini">
                                <%:Vérifier%>
>>>>>>> 313b157... Add new register device wizard
                            </button>
                        </li>
                    </ol>
                </div>
                <div class="alert alert-info done">
                    <p><%:Le serveur DHCP de votre modem supplémentaire est bien désactivé%>.</p>
<<<<<<< HEAD
                    <p><%:Afin de garantir une qualité de service optimale, personnalisez la répartition de votre trafic en fonction de vos applications et de votre bande passante%>. <a target="_blank" href="https://www.ovh.com/fr/g2246.0"><%:Suivez le guide%></a></p>
                    <button id="modemAdd" role="button" class="btn btn-primary"><%:Ajouter un modem%></button>
                    <a class="btn btn-primary pull-right" href="<%=pcdata(luci.dispatcher.build_url("admin/overthebox/overview"))%>"><%:Quitter l'assistant%></a>
                    </ul>
=======
                    <p><%:Vous pouvez, maintenant %>:</p>
                    <ul>
                        <li>
                            <%:Utiliser votre réseau%><br>
                            <a class="btn btn-primary" href="<%=pcdata(luci.dispatcher.build_url("admin/overthebox/overview"))%>"><%:Quitter l'assistant%></a>
                        </li>
                        <li>
                            <%:Ajouter un autre modem%><br>
                            <button id="modemAdd" role="button" class="btn btn-primary">
                                <%:Ajouter un modem%>
                            </button>
                        </li>
                    </ul>
                    <p><%:Afin de garantir une qualité de service optimale, personnalisez la répartition de votre trafic en fonction de vos applications et de votre bande passante%>. <a target="_blank" href="https://www.ovh.com/fr/g2246.0"><%:Suivez le guide%></a></p>
>>>>>>> 313b157... Add new register device wizard
                </div>
            </div>

        <div>
    </div>
</div>

<script>
    $(document).ready(function() {

        $.widget("ui.tooltip", $.ui.tooltip, {
            options: {
                content: function () {
                    return $(this).prop('title');
                }
            }
        });

        $('[rel=tooltip]').tooltip({
            position: {
                track: true,
                my: "left top-28",
                at: "right+10 top",
                collision: "none"
            },
            classes: {
                "ui-tooltip": "otb-tooltip"
            }
        });

        /* otb declared as global variable in included scripts */
        var me = {};
        otb.deviceId = "<%=device_id%>";
        otb.serviceId = "<%=service_id%>";
        otb.hasPassword = <%- if luci.sys.user.getpasswd("root") then -%>true<%- else -%>false<%- end -%>;
        otb.constants = {
            dhcpCheckURL: "<%=luci.dispatcher.build_url("admin", "overthebox", "dhcp_recheck")%>",
            dhcpStatusURL: "<%=luci.dispatcher.build_url("admin", "overthebox", "dhcp_status")%>",
            serviceActivateURL: "<%=luci.dispatcher.build_url("admin", "overthebox", "activate_service")%>",
<<<<<<< HEAD
            recievedActivationOrderURL: "<%=luci.dispatcher.build_url("admin", "overthebox", "need_activate_service")%>",
            interfaceStatusURL: "<%=luci.dispatcher.build_url("admin", "overthebox", "interfaces_status")%>",
            askServiceActivation: "<%=luci.dispatcher.build_url("overthebox", "me", "askserviceconfirmation")%>"
        };
        otb.translations.add("register-device@linked_device", "<%:associé à%>");
        otb.translations.add("register-device@dhcp_desactivated", "<%:Le DHCP de votre modem est désactivé%>");
        otb.translations.add("register-device@dhcp_activated", "<%:Le DHCP de votre modem est toujours actif%>");
        otb.translations.add("register-device@service_activation_error", "<%:L'activation de votre service n'a pas abouti%>");
        otb.translations.add("register-device@service_activation_success", "<%:Votre service est activé%>");
        otb.translations.add("register-device@service_associated", "<%:Le service OTB%> <strong>{{name}}</strong> <%:a bien été associé à votre OverTheBox%> <strong>{{deviceId}}</strong>");
        otb.translations.add("register-device@service_not_associated", "<%:Le service OTB%> <strong>{{name}}</strong> <%:n'a pas pu être associé à votre OverTheBox%> <strong>{{deviceId}}</strong>");
=======
            needActivateServiceURL: "<%=luci.dispatcher.build_url("admin", "overthebox", "need_activate_service")%>",
            interfaceStatusURL: "<%=luci.dispatcher.build_url("admin", "overthebox", "interfaces_status")%>"
        };
>>>>>>> 313b157... Add new register device wizard
        otb.dhcpCheckDelay = 30;
        otb.dhcpCheckInterval = 2;

        /* ==================== */
        /* == Initialization == */
        /* ==================== */

        /* === Initialize the display === */
        $("#serviceActivateSubmit").prop("disabled", true);
<<<<<<< HEAD
=======
        $("#serviceChoiceProcess").hide();
        $("#dhcpDesactivateProcess").hide();
        $("#qosActivateProcess").hide();
>>>>>>> 313b157... Add new register device wizard
        $("label.serviceList").hide();
        $("p.uniqueService").hide();
        $("div.noService").hide();
        $(".done").hide();
        $(".not-ready").hide();
        $(".config").show();
        $("p.skip").hide();
        $("#connexionDone").hide();
        $("#requireConnexion").hide();
        $("#releaseService").hide();
        $("#passwordWarning").hide();
<<<<<<< HEAD
        $("#needActivate").hide();
        $("div.wizard").wizard();
=======
>>>>>>> 313b157... Add new register device wizard

        otb.connectionScheme($(".jsFirstScheme"));
        $(".jsFirstScheme .jsModem2,.jsFirstScheme .jsModem3,.jsFirstScheme .jsModem4").hide();
        otb.connectionScheme($("#firstModemScheme"));
        $("#firstModemScheme .jsModem2,#firstModemScheme .jsModem3,#firstModemScheme .jsModem4").hide();
<<<<<<< HEAD
        otb.svgAddClass($("#firstModemScheme .jsModem1"), "to-be-plugged");
        otb.connectionScheme($("#additionalModemScheme"));
        $("#additionalModemScheme .jsModem2,#additionalModemScheme .jsModem3,#additionalModemScheme .jsModem4").hide();

        function next() {
            $("div.wizard").wizard("next", function() {
                otb.cleanMessages();
            });
        }
=======
        otb.svgAddClass($("#firstModemScheme .jsModem1"), "current");
        otb.connectionScheme($("#additionalModemScheme"));
        $("#additionalModemScheme .jsModem2,#additionalModemScheme .jsModem3,#additionalModemScheme .jsModem4").hide();

        /**
        * Activate Service if needed
        * @param {Function} callback Callback function
        */
        otb.activateService = function (/*, callback*/) {
            var callback = otb.getCallback(arguments);
            otb.nuc.needActivateService(function (err, data) {
                if (!err && data) {
                    if (!data.active) {
                        otb.nuc.activateService(otb.serviceId, function (err) {
                            if (err) {
                                otb.pushMessage($("div#messageContainer"), "error", "<p><%:L'activation de votre service n'a pas abouti%></p>");
                            }
                            callback(null, false);
                        });
                    } else {
                        callback(null, true);
                    }
                } else {
                    otb.pushMessage($("div#messageContainer"), "error", "<p><%:L'activation de votre service n'a pas abouti%></p>");
                    callback(err || "error", data);
                }
            });
        };
>>>>>>> 313b157... Add new register device wizard
        
        if (otb.serviceId) {
            $("#notConnectedMessage").hide();
            $("#serviceId").text(otb.serviceId);
        } else {
            $("#connectedMessage").hide();
        }

        $("a#disconnect").click(function () {
            Cookies.remove("consumerKey");
            window.location.reload();
        });
        
<<<<<<< HEAD
        // bind all "next" buttons
        $(".next").click(next);
=======
        $(".next").click(function() {
            otb.wizardNext($("div.wizard"), function() {
                $("div#messageContainer").html("");
            });
        });
>>>>>>> 313b157... Add new register device wizard

        /* === Register to OVH === */
        $("#registerButton").click(function() {
            $("#registerButton").prop("disabled",true);
            otb.api.getCredentials(function(err, data) {
                if (!err) {
                    Cookies.remove("consumerKey");
                    Cookies.set("consumerKey", otb.api.tmpCredentials.consumerKey);
                    window.location = otb.api.tmpCredentials.validationUrl;
                    console.log(data);
                }
            });
            
        });
        otb.api.consumerKey = Cookies.get("consumerKey");

        /* === Check if connected == */
        otb.spinner($("#isConnectedSpinner"), true);
        otb.api.me(function (err, data) {
            if (err) {
                otb.spinner($("#isConnectedSpinner"), false);
                $("#gettingDeviceId").hide();
                $("#requireConnexion").show();
            } else if (otb.deviceId) {
                otb.spinner($("#isConnectedSpinner"), false);
                $("#gettingDeviceId").hide();
                $("#connexionDone").show();
                me = data;
                $(".fullName").text([data.firstname, data.name].join(" "))
            } else {
                // Panic ! no device ID ! reloading !
                setTimeout(function() {
                    window.location.reload();
                }, 2000);
            }
            $("#registerWizard").show();
        });

        /* ============== */
        /* == Password == */
        /* ============== */

        /* === Attach wizzard events === */
        /*otb.wizardAttachEvent($("#passwordSetup"), "start", function () {
            $("#passErrorLong").hide();
            $("#passErrorComplex").hide();
            $("#passErrorSame").hide();

            // if password is set, skip this wizard step
            if (otb.hasPassword) {
                otb.wizardNext($("div.wizard"), function() {
<<<<<<< HEAD
                    otb.cleanMessages();
=======
                    $("div#messageContainer").html("");
>>>>>>> 313b157... Add new register device wizard
                });
            }

            // check password validity
            $("#passwordSetSubmit").prop("disabled", true);
            var passwordInput = $("#passwordSetupProcess input[type=password]");
            passwordInput.val("");
            passwordInput.keyup(function() {
                var isSame = (passwordInput.first().val() === passwordInput.last().val());
                var isLongEnough = passwordInput.first().val().length > 7;
                var isComplexEnough = /[a-z]/.test(passwordInput.first().val()) && /[A-Z]/.test(passwordInput.first().val());
                $("#passErrorLong").hide();
                $("#passErrorComplex").hide();
                $("#passErrorSame").hide();
                if (!isSame && passwordInput.last().val()) {
                    $("#passGpSecond").addClass("has-error");
                    $("#passGpSecond").removeClass("has-success");
                    $("#passErrorSame").show()
                } else {
                    $("#passGpSecond").removeClass("has-error");
                    $("#passGpSecond").addClass("has-success");
                }
                if (!isLongEnough || !isComplexEnough) {
                    $("#passGpFirst").addClass("has-error");
                    $("#passGpFirst").removeClass("has-success");
                    if (!isLongEnough) {
                        $("#passErrorLong").show();
                    }
                    if (!isComplexEnough) {
                        $("#passErrorComplex").show();
                    }
                } else {
                    $("#passGpFirst").removeClass("has-error");
                    $("#passGpFirst").addClass("has-success");
                }
                $("#passwordSetSubmit").prop("disabled", !isSame || !isLongEnough || !isComplexEnough);
            }); 
        }).wizardAttachEvent($("#passwordSetup"), "stop", function () {
            $("#passwordSetupProcess input[type=password]").unbind();
        });*/

        /* === Submit === */
        //otb.attachSubmit($("#passwordSetForm"), function(form) {
            /**
            Submit password here and then 
                    otb.wizardNext($("div.wizard"), function() {
<<<<<<< HEAD
                        otb.cleanMessages();
=======
                        $("div#messageContainer").html("");
>>>>>>> 313b157... Add new register device wizard
                    });
            To go to next step
            */
       /*     otb.wizardNext($("div.wizard"), function() {
<<<<<<< HEAD
                otb.cleanMessages();
=======
                $("div#messageContainer").html("");
>>>>>>> 313b157... Add new register device wizard
            });
        });*/

        /* ========================= */
        /* == Service association == */
        /* ========================= */

        /* === Attach wizzard events === */
        $("#serviceActivateSubmit").prop("disabled", true);
<<<<<<< HEAD
        var servicePoller = otb.noop;
        var activateServicePoller = otb.noop;

        $("div.wizard").wizard("attachEvent", "serviceChoice", "start", function() {
=======
        var servicePoller;
        otb.wizardAttachEvent($("#serviceChoice"), "start", function () {
>>>>>>> 313b157... Add new register device wizard
            otb.spinner($("#getServicesSpinner"), true);
            servicePoller = otb.api.startPoller({
                delay: 5,
                caller: function(callback) {
                    otb.api.getOtbServices(function (err, services) {
                        if (!err && otb.isArray(services)) {
                            var configuredService = otb.checkLinkedDevice(services, otb.deviceId);
                            otb.spinner($("#getServicesSpinner"), false);
                            if (services.length) {
                                servicePoller();
                                otb.services = services;
                            }
                            if (configuredService) {
                                $("div#serviceChoiceProcess .config").hide();
                                $("p.skip").show();
                                $("p.skip span").text(configuredService.serviceName);
                                $("div#serviceChoiceProcess .done").show();
                            } else {
                                otb.getServices($("div.serviceList"), services, function(err) {
                                    if (!err) {
                                        $("#serviceActivateSubmit").show();
                                        $("#serviceActivateSubmit").prop("disabled", false);
                                    }
                                    if (err === "no-service") {
                                        $("#serviceActivateSubmit").hide();
                                    }
                                });
                            }
                        }
                        callback();
                    });
                }
            });
<<<<<<< HEAD
        }).wizard("attachEvent", "serviceChoice" ,"stop", function() {
            activateServicePoller();
=======
        }).wizardAttachEvent($("#serviceChoice"), "stop", function () {
>>>>>>> 313b157... Add new register device wizard
            servicePoller();
        });

        /* === Submit === */
        otb.attachSubmit($("#activateServiceForm"), function(form) {
            var serviceId = $(form).find("[name=serviceSelected]").first().val();
            otb.spinner($("#associateServiceSpinner"), true);
            $("#serviceActivateSubmit").prop("disabled", true);
            $("select#serviceList").prop("disabled", true);

            otb.tmpService = otb.arrayFind(otb.services, {serviceName: serviceId});

            if (!otb.tmpService.device || !otb.tmpService.device.deviceId) {
                // service is available
<<<<<<< HEAD
                otb.attachService(serviceId, function (err) {
                    if (err) {
                        $("#serviceActivateSubmit").prop("disabled", false);
                    } else {
                        activateServicePoller();
                        activateServicePoller = window.otb.gotoServiceActivation(next);
=======
                otb.api.linkOtbDevice(serviceId, otb.deviceId, function (err) {
                    $("#serviceActivateSubmit").prop("disabled", false);
                    $("select#serviceList").prop("disabled", false);
                    otb.spinner($("#associateServiceSpinner"), false);
                    var name = otb.tmpService.customerDescription || otb.tmpService.serviceName;
                    if (!err) {
                        otb.pushMessage($("div#messageContainer"), "success", "<p><%:Le service OTB%> <strong>" + name + "</strong> <%:a bien été associé à votre OverTheBox%> <strong>" + otb.deviceId + "</strong></p>");
                        $("div#serviceChoiceProcess .config").hide();
                        $("div#serviceChoiceProcess .done").show();
                        otb.serviceId = serviceId;
                    } else {
                        otb.pushMessage($("div#messageContainer"), "error", "<p><%:Le service OTB%> <strong>" + name + "</strong> <%:n'a pas pu être associé à votre OverTheBox%> <strong>" + otb.deviceId + "</strong></p>");
>>>>>>> 313b157... Add new register device wizard
                    }
                });
            } else {
                // service must be unlinked first
                $("#releaseService").show();
<<<<<<< HEAD
                $("#serviceActivateSubmit").hide();
=======
>>>>>>> 313b157... Add new register device wizard
            }
            
        });

<<<<<<< HEAD
        // Service not available => cancel
=======
>>>>>>> 313b157... Add new register device wizard
        $("#releaseService button.no").click(function () {
            otb.spinner($("#associateServiceSpinner"), false);
            $("#serviceActivateSubmit").prop("disabled", false);
            $("select#serviceList").prop("disabled", false);
            $("#releaseService").hide();
<<<<<<< HEAD
            $("#serviceActivateSubmit").show();
        });

        // Service not available => proceed
=======
        });

>>>>>>> 313b157... Add new register device wizard
        $("#releaseService button.yes").click(function () {
            $("#releaseService button.no").prop("disabled", true);
            $("#releaseService button.yes").prop("disabled", true);
            otb.api.unlinkOtbDevice(otb.tmpService.serviceName, function(err) {
                if (!err) {
                    delete otb.tmpService.device;
                    $("select#serviceList option:selected").text((otb.tmpService.customerDescription || otb.tmpService.serviceName))
<<<<<<< HEAD
                    var serviceId = $("#activateServiceForm").find("[name=serviceSelected]").first().val();
                    otb.tmpService = otb.arrayFind(otb.services, {serviceName: serviceId});
                    if (!otb.tmpService.device || !otb.tmpService.device.deviceId) {
                        otb.attachService(serviceId, function (err) {
                            if (err) {
                                $("#serviceActivateSubmit").prop("disabled", false);
                            } else {
                                activateServicePoller();
                                activateServicePoller = window.otb.gotoServiceActivation(next);
                            }
                        });
                    }
                } else {
                    $("#serviceActivateSubmit").prop("disabled", false);
                    $("select#serviceList").prop("disabled", false);
                }
                otb.spinner($("#associateServiceSpinner"), false);
                $("#releaseService").hide();
                $("#releaseService button.no").prop("disabled", false);
                $("#releaseService button.yes").prop("disabled", false);
            });
        });

        //Activate service
        $("#serviceLinked").click(function () {
            $("#serviceLinked").prop("disabled", true);
            otb.activateService(otb.serviceId, function(err, status) {
                if (!err) {
                    next();
                }
                $("#serviceLinked").prop("disabled", false);
            })
        });


=======
                }
                otb.spinner($("#associateServiceSpinner"), false);
                $("#releaseService").hide();
                $("#serviceActivateSubmit").prop("disabled", false);
                $("#releaseService button.no").prop("disabled", false);
                $("#releaseService button.yes").prop("disabled", false);
                $("select#serviceList").prop("disabled", false);
            });
        });

        $("#serviceLinked").click(function() {
            otb.nuc.activateService(otb.deviceId, function(err) {
                if (err) {
                    otb.pushMessage($("div#messageContainer"), "error", "<p><%:L'activation de votre service n'a pas abouti%></p>");
                }
            });
        });

>>>>>>> 313b157... Add new register device wizard
        /* ======================== */
        /* == First modem Config == */
        /* ======================== */

<<<<<<< HEAD
        $("#gotoAdditionalModem").hide();
        $("#testPublicIp").click(function() {
            $("#testPublicIp").prop("disabled", true);
            otb.usingOTB(function (err, status) {
                if (!err && status) {
                    //$("#gotoAdditionalModem").show();
                    $("#testPublicIp").hide();
                    $("div.wizard").wizard("next", function() {
                        otb.cleanMessages();
                    });
                    otb.pushMessage($("div#messageContainer"), "success", "<p><%:Votre OverTheBox est opérationnelle%></p>");
                } else {
                    otb.pushMessage($("div#messageContainer"), "error", "<p><%:Veuillez déconnecter et reconnecter votre ordinateur au réseau%></p>");
=======

        $("#gotoAdditionalModem").hide();
        $("#testPublicIp").click(function() {
            $("#testPublicIp").prop("disabled", true);
            otb.nuc.getPublicIp(function (err, ip) {
                if (!err) {
                    $("#gotoAdditionalModem").show();
                    $("#testPublicIp").hide();
                    otb.pushMessage($("div#messageContainer"), "success", "<p><%:Votre OverTheBox est opérationnelle%></p>");
>>>>>>> 313b157... Add new register device wizard
                }
                $("#testPublicIp").prop("disabled", false)
            });
        });

<<<<<<< HEAD
        var waitForModem = otb.noop;
        var searchDhcp = otb.noop;
        $("div.wizard").wizard("attachEvent", "dhcpDesactivate", "start", function() {
            if (otb.getRoute() === "/ip-check") {
                $("div#dhcpDesactivateProcess .config").hide();
                $("#gotoAdditionalModem").prop("disabled", true);
                $("div#dhcpDesactivateProcess .done").show();
                $("#gotoAdditionalModem").prop("disabled", false);
            } else {
                $("div#dhcpDesactivateProcess .config").hide();
                $("div#dhcpDesactivateProcess .done").hide();
                // Check that almost one modem is connected
                waitForModem();
                waitForModem = window.otb.waitForModem(1, function (err, data) {
                    if (data.found) {
                        $("div#dhcpDesactivateProcess .config").show();
                        $("div#dhcpDesactivateProcess .not-ready").hide();
                    } else {
                        $("div#dhcpDesactivateProcess .config").hide();
                        $("div#dhcpDesactivateProcess .not-ready").show();
                    }
                });
            }
        }).wizard("attachEvent", "dhcpDesactivate", "stop", function() {
            waitForModem();
            searchDhcp();
=======
        var waitForModem;
        otb.wizardAttachEvent($("#dhcpDesactivate"), "start", function () {
            $("div#dhcpDesactivateProcess .config").hide();
            $("div#dhcpDesactivateProcess .done").hide();

            // Check that almost one modem is connected
            waitForModem = otb.api.startPoller({
                caller: function (callback) {
                    otb.nuc.connectedModems(function(err, modems) {
                        if ((!err) && (otb.isArray(modems)) && (modems.length > 0)) {
                            waitForModem();
                            $("div#dhcpDesactivateProcess .config").show();
                            $("div#dhcpDesactivateProcess .not-ready").hide();
                        } else {
                            $("div#dhcpDesactivateProcess .config").hide();
                            $("div#dhcpDesactivateProcess .not-ready").show();
                        }
                        callback();
                    });
                },
                delay: 5
            });

        }).wizardAttachEvent($("#dhcpDesactivate"), "stop", function () {
            waitForModem();
>>>>>>> 313b157... Add new register device wizard
        });

        var dhcpMainCheckButton = $("div#dhcpDesactivateProcess .jsDhcpCheck");
        dhcpMainCheckButton.click(function () {
<<<<<<< HEAD
            otb.cleanMessages();
            searchDhcp();
            dhcpMainCheckButton.prop("disabled", true);

            // check status of DHCP lease
            searchDhcp = otb.checkDHCP(otb.dhcpCheckDelay, otb.dhcpCheckInterval, function (err, dhcp) {
                switch (dhcp.status) {
                    case "found":
                        dhcpMainCheckButton.prop("disabled", false);
                        dhcpMainCheckButton.find("span.percent").text("");
                        break;
                    case "checking":
                        dhcpMainCheckButton.find("span.percent").text(dhcp.message);
                        break;
                    default:
                        dhcpMainCheckButton.prop("disabled", false);
                        $("div#dhcpDesactivateProcess .config").hide();
                        $("#gotoAdditionalModem").prop("disabled", true);
                        $("div#dhcpDesactivateProcess .done").show();
                        $("#gotoAdditionalModem").prop("disabled", false);
                        dhcpMainCheckButton.find("span.percent").text("");
                        otb.setRoute("ip-check");
                }
=======
            dhcpMainCheckButton.prop("disabled", true);
            // Force request DHCP lease
            otb.nuc.dhcpCheck(function(err) {
                if (err) {
                    dhcpMainCheckButton.prop("disabled", false);
                    otb.pushMessage($("div#messageContainer"), "error", "<p><%:Le DHCP de votre modem est toujours actif%></p>");
                    callback();
                    return;
                }
                var counter = 0;
                // check status of DHCP lease
                var poller = otb.api.startPoller({
                    delay: otb.dhcpCheckInterval,
                    caller: function (callback) {
                        otb.nuc.dhcpStatus(otb.dhcpCheckDelay, function (err, dhcp) {
                            if (!err) {
                                switch (dhcp.status) {
                                    case "found":
                                        // Stop polling
                                        poller();
                                        dhcpMainCheckButton.prop("disabled", false);
                                        otb.pushMessage($("div#messageContainer"), "error", "<p><%:Le DHCP de votre modem est toujours actif%></p>");
                                        break;
                                    case "notFound":
                                        // Stop polling
                                        poller();
                                        dhcpMainCheckButton.prop("disabled", false);
                                        $("div#dhcpDesactivateProcess .config").hide();
                                        $("#gotoAdditionalModem").prop("disabled", true);
                                        $("div#dhcpDesactivateProcess .done").show();
                                        $("#gotoAdditionalModem").prop("disabled", false);

                                        otb.pushMessage($("div#messageContainer"), "success", "<p><%:Le DHCP de votre modem est désactivé%></p>");
                                        break;
                                    default: //checking
                                        var steps = Math.ceil(otb.dhcpCheckDelay / otb.dhcpCheckInterval);
                                        if (counter > steps + 1) {
                                            dhcpMainCheckButton.find("span.percent").text("");
                                            dhcpMainCheckButton.prop("disabled", false);
                                            poller();
                                        } else {
                                            dhcpMainCheckButton.find("span.percent").text(Math.round((counter++) * 100 / steps) + "%");
                                        }
                                        break;
                                }
                            }
                            callback();
                        });
                    }
                });
>>>>>>> 313b157... Add new register device wizard
            });
        });

        /* ============================= */
        /* == Additional modem Config == */
        /* ============================= */

<<<<<<< HEAD
        $("div.wizard").wizard("attachEvent", "dhcpDesactivateMore", "start", function() {
            $("div#dhcpDesactivateMoreProcess .config").hide();
            $("div#dhcpDesactivateMoreProcess .done").hide();

            waitForModem();
            otb.nuc.connectedModems(function (err, data) {
                otb.connectedModems = data.length;

                waitForModem = window.otb.waitForModem(otb.connectedModems + 1, function (err, data) {
                    if (data.found) {
                        $("div#dhcpDesactivateMoreProcess .config").show();
                        $("div#dhcpDesactivateMoreProcess .not-ready").hide();
                        otb.pushMessage($("div#messageContainer"), "success", "<p><%:Un nouveau modem a été détecté%></p>");
                    } else {
                        $("div#dhcpDesactivateMoreProcess .config").hide();
                        $("div#dhcpDesactivateMoreProcess .not-ready").show();
                    }
                    var numModems = otb.connectedModems + 1 ;
                    $("#additionalModemScheme").css("height", 80 + 40 * numModems);
                    for (var i = 1; i<=4; i++) {
                        if (i <= numModems) {
                            $("#additionalModemScheme .jsModem" + i).show();
                        } else {
                            $("#additionalModemScheme .jsModem" + i).hide();
                        }
                        if (i === data.modems.length && i ===  numModems) {
                            otb.svgAddClass($("#additionalModemScheme .jsModem" + i), "current");
                            otb.svgRemoveClass($("#additionalModemScheme .jsModem" + i), "to-be-plugged");
                        } else if (i ===  numModems) {
                            otb.svgAddClass($("#additionalModemScheme .jsModem" + i), "to-be-plugged");
                            otb.svgRemoveClass($("#additionalModemScheme .jsModem" + i), "current");
                        } else {
                            otb.svgRemoveClass($("#additionalModemScheme .jsModem" + i), "to-be-plugged");
                            otb.svgRemoveClass($("#additionalModemScheme .jsModem" + i), "current");
                        }
                    }
                });

            });

        }).wizard("attachEvent", "dhcpDesactivateMore", "stop", function() {
            waitForModem();
        });

        $("#modemPlugged").click(function() {
            waitForModem();
            $("div#dhcpDesactivateMoreProcess .config").show();
            $("div#dhcpDesactivateMoreProcess .not-ready").hide();
        });

        var dhcpAdditionalCheckButton = $("div#dhcpDesactivateMoreProcess .jsDhcpCheck");
        dhcpAdditionalCheckButton.click(function () {
            dhcpAdditionalCheckButton.prop("disabled", true);
            otb.cleanMessages();

            searchDhcp = otb.checkDHCP(otb.dhcpCheckDelay, otb.dhcpCheckInterval, function (err, dhcp) {
                switch (dhcp.status) {
                    case "found":
                        dhcpAdditionalCheckButton.prop("disabled", false);
                        dhcpAdditionalCheckButton.find("span.percent").text("");
                        break;
                    case "checking":
                        dhcpAdditionalCheckButton.find("span.percent").text(dhcp.message);
                        break;
                    default:
                        dhcpAdditionalCheckButton.prop("disabled", false);
                        $("div#dhcpDesactivateMoreProcess .config").hide();
                        $("#gotoAdditionalModem").prop("disabled", true);
                        $("div#dhcpDesactivateMoreProcess .done").show();
                        dhcpAdditionalCheckButton.find("span.percent").text("");
                        for (var i = 1; i<=4; i++) {
                            otb.svgRemoveClass($("#additionalModemScheme .jsModem" + i), "current");
                            otb.svgRemoveClass($("#additionalModemScheme .jsModem" + i), "to-be-plugged");
                        }
                }
            });

        });

        $("#modemAdd").click(function () {
            $("div.wizard").wizard("goto", "dhcpDesactivateMore", function() {
                otb.cleanMessages();
            });
=======
        //var additionalModemPoller;
        otb.wizardAttachEvent($("#dhcpDesactivateMore"), "start", function () {
            $("div#dhcpDesactivateMoreProcess .config").hide();

            // Check that almost two modems are connected
            waitForModem = otb.api.startPoller({
                delay: 5,
                caller: function (callback) {
                    otb.nuc.connectedModems(function(err, modems) {
                        if ((!err) && (otb.isArray(modems)) && (modems.length > 1)) {
                            waitForModem();
                            $("div#dhcpDesactivateMoreProcess .config").show();
                            $("div#dhcpDesactivateMoreProcess .not-ready").hide();
                        } else {
                            $("div#dhcpDesactivateMoreProcess .config").hide();
                            $("div#dhcpDesactivateMoreProcess .not-ready").show();
                        }
                        for (var i = 1; i<=4; i++) {
                            if (i <= (otb.isArray(modems) ? modems.length + 1 : 2)) {
                                $("#additionalModemScheme .jsModem" + i).show();
                            } else {
                                $("#additionalModemScheme .jsModem" + i).hide();
                            }
                            if ((i === (otb.isArray(modems) ? modems.length + 1 : 2))) {
                                otb.svgAddClass($("#additionalModemScheme .jsModem" + i), "current");
                            } else {
                                otb.svgRemoveClass($("#additionalModemScheme .jsModem" + i), "current");
                            }
                        }
                        
                        callback();
                    });
                }
            });

        }).wizardAttachEvent($("#dhcpDesactivateMore"), "stop", function () {
            waitForModem();
        });

        var dhcpAdditionalCheckButton = $("div#dhcpDesactivateMoreProcess .jsDhcpCheck");
        dhcpAdditionalCheckButton.click(function () {
            dhcpAdditionalCheckButton.prop("disabled", true);
            // Force request DHCP lease
            otb.nuc.dhcpCheck(function(err) {
                if (err) {
                    dhcpMainCheckButton.prop("disabled", false);
                    otb.pushMessage($("div#messageContainer"), "error", "<p><%:Le DHCP de votre modem est toujours actif%></p>");
                    callback();
                    return;
                }
                var counter = 0;
                // check status of DHCP lease
                var poller = otb.api.startPoller({
                    delay: otb.dhcpCheckInterval,
                    caller: function (callback) {
                        otb.nuc.dhcpStatus(otb.dhcpCheckDelay, function (err, dhcp) {
                            if (!err) {
                                switch (dhcp) {
                                    case "found":
                                        // Stop polling
                                        poller();
                                        dhcpAdditionalCheckButton.prop("disabled", false);
                                        otb.pushMessage($("div#messageContainer"), "error", "<p><%:Le DHCP de votre modem est toujours actif%></p>");
                                        break;
                                    case "notFound":
                                        // Stop polling
                                        poller();
                                        dhcpAdditionalCheckButton.prop("disabled", false);
                                        $("div#dhcpDesactivateMoreProcess .config").hide();
                                        $("#gotoAdditionalModem").prop("disabled", true);
                                        $("div#dhcpDesactivateMoreProcess .done").show();
                                        otb.pushMessage($("div#messageContainer"), "success", "<p><%:Le DHCP de votre modem est désactivé%></p>");
                                        break;
                                    default: //checking
                                        var steps = Math.ceil(otb.dhcpCheckDelay / otb.dhcpCheckInterval);
                                        if (counter > steps + 1) {
                                            dhcpAdditionalCheckButton.find("span.percent").text("");
                                            dhcpAdditionalCheckButton.prop("disabled", false);
                                            poller();
                                        } else {
                                            dhcpAdditionalCheckButton.find("span.percent").text(Math.round((counter++) * 100 / steps) + "%");
                                        }
                                        break;
                                }
                            }
                            callback();
                        });
                    }
                });
            });
        });

        $("#modemAdd").click(function () {
            $("div#dhcpDesactivateMoreProcess .config").show();
            $("div#dhcpDesactivateMoreProcess .done").hide();
>>>>>>> 313b157... Add new register device wizard
        });

        /* ============ */
        /* == Wizard == */
        /* ============ */

        /* === Start wizard === */
<<<<<<< HEAD
        var targetWizard = window.location.hash.replace(/^#/, "");
        if ($("div.wizard").wizard("has", targetWizard)) {
            $("div.wizard").wizard("goto", targetWizard, function() {
                otb.cleanMessages();
            })
        } else {
            $("div.wizard").wizard("first", function() {
                otb.cleanMessages();
            });
        }
        var hash = window.location.hash.replace(/\/.*/, "");
        setInterval(function(){
            if (window.location.hash.replace(/\/.*/, "") != hash) {
                hash = window.location.hash.replace(/\/.*/, "");
                var currentWizard = $("div.wizard").find("svg.ongoing").first().attr("id");
                targetWizard = hash.replace(/^#/, "");
                if ($("div.wizard").wizard("has", targetWizard) && targetWizard !== currentWizard) {
                    $("div.wizard").wizard("goto", targetWizard, function() {
                        otb.cleanMessages();
=======
        if (otb.wizardHas($("div.wizard"), window.location.hash.replace(/^#/, ""))) {
            otb.wizardGoto($(window.location.hash), function() {
                $("div#messageContainer").html("");
            });
        } else {
            otb.wizardGoto($("#serviceChoice"), function() {
                $("div#messageContainer").html("");
            });
        }
        var hash = window.location.hash;
        setInterval(function(){
            if (window.location.hash != hash) {
                hash = window.location.hash;
                var currentWizard = $("div.wizard").find("svg.ongoing").first().attr("id");
                var targetWizard = hash.replace(/^#/, "");
                if (otb.wizardHas($("div.wizard"), targetWizard) && targetWizard !== currentWizard) {
                    otb.wizardGoto($(hash), function() {
                        $("div#messageContainer").html("");
>>>>>>> 313b157... Add new register device wizard
                    });
                }
            }
        }, 100);

    });
</script>
<%+footer%>