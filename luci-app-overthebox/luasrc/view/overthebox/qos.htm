<%
-- Copyright 2015 OVH (OverTheBox@ovh.net)
-- Simon Lelievre (simon.lelievre@corp.ovh.com)
-- Sebastien Duponcheel (sebastien.duponcheel@ovh.net)
--
-- This file is part of OverTheBox for OpenWrt.
--
--    OverTheBox is free software: you can redistribute it and/or modify
--    it under the terms of the GNU General Public License as published by
--    the Free Software Foundation, either version 3 of the License, or
--    (at your option) any later version.
--
--    OverTheBox is distributed in the hope that it will be useful,
--    but WITHOUT ANY WARRANTY; without even the implied warranty of
--    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--    GNU General Public License for more details.
--
--    You should have received a copy of the GNU General Public License
--    along with OverTheBox.  If not, see (http://www.gnu.org/licenses/)
-%>
<%-
	local ntm = require "luci.model.network".init()
	local uci = require "luci.model.uci".cursor()

	local dev
	local devices = { "all" }
	for _, dev in luci.util.vspairs(luci.sys.net.devices()) do
		if dev ~= "lo" and not ntm:ignore_interface(dev) then
			if uci:get("network", dev, "type") == "tunnel" then
				devices[#devices+1] = dev
			end
		end
	end

	local curdev = luci.dispatcher.context.requestpath
	curdev = curdev[#curdev] ~= "qos" and curdev[#curdev] or devices[1]
-%>

<%+header%>

<script type="text/javascript" src="<%=resource%>/cbi.js"></script>
<script type="text/javascript" src="<%=resource%>/jquery-1.11.3.min.js"></script>
<script type="text/javascript" src="<%=resource%>/bootstrap.min.js"></script>
<script type="text/javascript" src="<%=resource%>/seedrandom.js"></script>
<script type="text/javascript" src="<%=resource%>/ovh/scripts/graph.js"></script>
<script type="text/javascript">
function createQosDownloadStatsFooter(name, qdisc, color, label){
	var table = document.getElementById(name + '_stats');
	// Group queue per label
	var tr = document.getElementById(label + '_' + name);
	var s_type = ["cur", "avg", "peak"];
	if(!tr) {
		tr = table.insertRow();
		// Create cells of the table
		var qdisclabel = tr.insertCell(0);
		// Crete itf legend
		var strong = document.createElement('strong');
		strong.appendChild(document.createTextNode(label ? label : itf));
		strong.setAttribute('style', 'border-bottom:2px solid ' + color);
		qdisclabel.appendChild(strong);

		s_type.forEach(function(stype){
			var stats = tr.insertCell(-1);
			var ul = document.createElement("lu");
			ul.setAttribute('style', 'list-style: none;');
			ul.setAttribute('id', stype + '_' + label + '_' + name);
			stats.appendChild(ul);
		});
	}
	tr.setAttribute('id', label + '_' + name);

	// Create Cur, Avg, Peak cells
	var itf = qdisc.substr(0, qdisc.length - 1);
	s_type.forEach(function(stype) {
		if(!document.getElementById('id', qdisc + '_' + name + '_' + stype)) {
			var stats = document.getElementById(stype + '_' + label + '_' + name);
			if(stats) {
				var liValue = document.createElement("li");

				var label1 = document.createElement("label");
				label1.appendChild(document.createTextNode('if'+itf+': '));
				liValue.appendChild(label1);

				var spanValue = document.createElement("span");
				spanValue.className = "value";
				spanValue.setAttribute('id', qdisc + '_' + name + '_' + stype);
				liValue.appendChild(spanValue);

				stats.appendChild(liValue);
			}
		}
	});
}
</script>

<script type="text/javascript">//<![CDATA[

	$(function(){
		$("#ddlInterface").change(function() {
			window.location.href = this.value;
		});
	});

  var normalPriorityString = "Normal"
  var latencyPriorityString = "Latency - VoIP"
  var lowPriorityString = "Low priority"
  var highPriorityString = "High priority"

  function getQosLabel(qdisc, way) {
    if(way == "upload"){
      if(qdisc == "Best Effort")
        return normalPriorityString;
      if(qdisc == "Bulk")
        return lowPriorityString;
      if(qdisc == "Video")
        return highPriorityString;
      if(qdisc == "Voice")
        return latencyPriorityString;
    }
    if(way == "download"){
      var itf = qdisc.substr(0, qdisc.length - 1);
      var qdisc = qdisc.substr(-1);
      if(qdisc == "2")
        return lowPriorityString;
      if(qdisc == "3")
        return normalPriorityString;
      if(qdisc == "4")
        return highPriorityString;
      if(qdisc == "5")
        return latencyPriorityString;
    }
    return qdisc;
  }

  function stringToColour(str) {
    if(str == latencyPriorityString)
      return "Red";
    if(str == highPriorityString)
      return "Orange";
    if(str == normalPriorityString)
      return "LightGreen";
    if(str == lowPriorityString)
      return "DarkOliveGreen";

    // Generate a color folowing the name
    Math.seedrandom(str);
    var rand = Math.random() * Math.pow(255,3);
    Math.seedrandom(); // don't leave a non-random seed in the generator
    for (var i = 0, colour = "#"; i < 3; colour += ("00" + ((rand >> i++ * 8) & 0xFF).toString(16)).slice(-2));
    return colour;
  }

	var all = true;
	var bwxhr = new XHR();

	//var Gdn;
	var Gup;

	var TIME = 0;
	var RXB  = 1;
	var RXP  = 2;
	var TXB  = 3;
	var TXP  = 4;

	var width  = 760;
	var height = 300;
	var step   = 5;

	var data_wanted = Math.floor(width / step);

	var data_fill   = 0;
	var data_stamp  = 0;

	var label_25;
	var label_50;
	var label_75;

	var label_scale;

	var def;
	var dnPolygons 	= {};
	var dndata	= {};
        var upPolygons 	= {};
	var updata  	= {};

        /* Smoother */
        function simple_moving_averager(name, period) {
                var nums = {}
                nums[name] = [];
                return function(num) {
                        nums[name].push(num);
                        if (nums[name].length > period)
                                nums[name].splice(0,1);  // remove the first element of the array
                        var sum = 0;
                        for (var i in nums[name])
                                sum += nums[name][i];
                        var n = period;
                        if (nums[name].length < period)
                                n = nums[name].length;
                        return(sum/n);
                }
        }

	/* wait for SVG */
	window.setTimeout(
		function() {
			var dnsvg = document.getElementById('dnsvg');
			var upsvg = document.getElementById('upsvg');

			try {
				Gdn = dnsvg.getSVGDocument ? dnsvg.getSVGDocument() : dnsvg.contentDocument;
				Gup = upsvg.getSVGDocument ? upsvg.getSVGDocument() : upsvg.contentDocument;
			}
			catch(e) {
				Gdn = document.embeds['dnsvg'].getSVGDocument();
				Gup = document.embeds['upsvg'].getSVGDocument();
			}

			if (!Gdn || !Gup)
			{
				window.setTimeout(arguments.callee, 1000);
			}
			else
			{
				/* find sizes */
				width       = upsvg.offsetWidth  - 2;
				height      = upsvg.offsetHeight - 2;
				data_wanted = Math.ceil(width / step);

				/* find svg elements */
				labeldn_25 = $("#dn_label_25");
				labeldn_50 = $("#dn_label_50");
				labeldn_75 = $("#dn_label_75");

				labelup_25 = $("#up_label_25");
				labelup_50 = $("#up_label_50");
				labelup_75 = $("#up_label_75");

				/*
				label_rx_cur  = document.getElementById('rx_bw_cur');
				label_rx_avg  = document.getElementById('rx_bw_avg');
				label_rx_peak = document.getElementById('rx_bw_peak');

				label_tx_cur  = document.getElementById('tx_bw_cur');
				label_tx_avg  = document.getElementById('tx_bw_avg');
				label_tx_peak = document.getElementById('tx_bw_peak');
				*/

				labeldn_scale   = document.getElementById('dnscale');
				labelup_scale   = document.getElementById('upscale');

				/* plot horizontal time interval lines */
				for (var i = width % (step * 60); i < width; i += step * 60)
				{

					var linedn = Gdn.createElementNS('http://www.w3.org/2000/svg', 'line');
					linedn.setAttribute('x1', i);
					linedn.setAttribute('y1', 0);
					linedn.setAttribute('x2', i);
					linedn.setAttribute('y2', '100%');
					linedn.setAttribute('style', 'stroke:black;stroke-width:0.1');
					Gdn.getElementById('label_25').parentNode.appendChild(linedn);

					var lineup = Gup.createElementNS('http://www.w3.org/2000/svg', 'line');
					lineup.setAttribute('x1', i);
					lineup.setAttribute('y1', 0);
					lineup.setAttribute('x2', i);
					lineup.setAttribute('y2', '100%');
					lineup.setAttribute('style', 'stroke:black;stroke-width:0.1');
					Gup.getElementById('label_25').parentNode.appendChild(lineup);

					var labelContent = Math.round((width - i) / step / 60) + 'm';
					insertXAxisValue($("div#dn-x-axis-info"), labelContent, 0, i - 5);
					insertXAxisValue($("div#up-x-axis-info"), labelContent, 0, i - 5);
				}

				labeldn_scale.innerHTML = String.format('<%:(%d minutes window, %d seconds interval)%>', 3, data_wanted / 60);
				labelup_scale.innerHTML = String.format('<%:(%d minutes window, %d seconds interval)%>', 3, data_wanted / 60);

					/* render datasets, start update interval */
					XHR.poll(3, '<%=build_url("admin/overthebox/qos_stats", curdev)%>', null,
					function(x, dataarray)
					{
						var data_max_dnl   = 0;
						var data_max_upl   = 0;
						var data_scale_dnl = 0;
						var data_scale_upl = 0;

						var data_rx_avg = 0;
						var data_tx_avg = 0;

						var data_rx_peak = 0;
						var data_tx_peak = 0;

						var data = {};

						// Sort timestamp
						var timestamps = Object.keys(dataarray);
						timestamps.sort();

						// Hide 500 qdisc download values
						for(var timestp in dataarray)
						{
							delete dataarray[timestp]["download"]["500"];
						}

						// Create and initialize qdisc graphic elements
						for(var qdisc in dataarray[timestamps[timestamps.length - 1]]["upload"])
						{
							var color = stringToColour(getQosLabel(qdisc, "upload"));
							if(typeof upPolygons[qdisc] != "object")
							{
								var upline = Gup.createElementNS('http://www.w3.org/2000/svg', 'polyline');
								upline.setAttributeNS(null, 'id', 'tx_' + qdisc);
								upline.setAttributeNS(null, 'style', 'fill:' + color + ';fill-opacity: 0.6;stroke:black;stroke-width:0.1');
								Gup.getElementById('rx').parentNode.appendChild(upline);
									upPolygons[qdisc] = Gup.getElementById('tx_' + qdisc);
								/* prefill datasets */
								updata[qdisc] = [ ];
								for (var i = 0; i < data_wanted; i++)
								{
									updata[qdisc][i] = 0;
								}
								createStatsFooter("upload", qdisc, color, getQosLabel(qdisc, "upload"));
							}
						}
						for(var qdisc in dataarray[timestamps[timestamps.length - 1]]["download"])
						{
							var color = stringToColour(getQosLabel(qdisc, "download"));
							if(typeof dnPolygons[qdisc] != "object")
							{
								var dnline = Gdn.createElementNS('http://www.w3.org/2000/svg', 'polyline');
								dnline.setAttributeNS(null, 'id', 'rx_' + qdisc);
								dnline.setAttributeNS(null, 'style', 'fill:' + color + ';fill-opacity: 0.6;stroke:black;stroke-width:0.1');
								Gdn.getElementById('tx').parentNode.appendChild(dnline);

								dnPolygons[qdisc] = Gdn.getElementById('rx_' + qdisc);
								/* prefill datasets */
								dndata[qdisc] = [ ];
								for (var i = 0; i < data_wanted; i++)
								{
								       dndata[qdisc][i] = 0;
								}
								createQosDownloadStatsFooter("download", qdisc, color, getQosLabel(qdisc, "download"));
							}
						}
						// compute data point
						for(var i= data_stamp ? 0 : 1; i < timestamps.length; i++)
						{
							if ( timestamps[i] <= data_stamp)
								continue;
							if (i > 0)
							{
								var time_delta = timestamps[i] - timestamps[i-1];
								if(time_delta)
								{
									for(var qdisc in dataarray[timestamps[i]]["upload"])
									{
										// Compute datapoint : add all interfaces bytes counters
										var upload = 0;
										for(var intf in dataarray[timestamps[i]]["upload"][qdisc])
										{
											if((typeof dataarray[timestamps[i]]["upload"][qdisc][intf] !== "undefined")
												&& (typeof dataarray[timestamps[i-1]]["upload"][qdisc] !== "undefined")
												&& (typeof dataarray[timestamps[i-1]]["upload"][qdisc][intf] !== "undefined")) {
												upload += (Number(dataarray[timestamps[i]]["upload"][qdisc][intf].bytes) - Number(dataarray[timestamps[i-1]]["upload"][qdisc][intf].bytes)) / time_delta;
											}
										}
										updata[qdisc].push(upload);
									}
									for(var qdisc in dataarray[timestamps[i]]["download"])
									{
										// Compute datapoint : add all interfaces bytes counters
										var download = 0;
										for(var intf in dataarray[timestamps[i]]["download"][qdisc])
										{
											if((typeof dataarray[timestamps[i]]["download"][qdisc][intf] !== "undefined")
												&& (typeof dataarray[timestamps[i-1]]["download"][qdisc] !== "undefined")
												&& (typeof dataarray[timestamps[i-1]]["download"][qdisc][intf] !== "undefined")) {
												download += (Number(dataarray[timestamps[i]]["download"][qdisc][intf].bytes) - Number(dataarray[timestamps[i-1]]["download"][qdisc][intf].bytes)) / time_delta;
											}
										}
										dndata[qdisc].push(download);
									}
								}
							}
							data_stamp = Math.max(data_stamp, timestamps[i])
						}

						for(var qdisc in dataarray[timestamps[timestamps.length - 1]]["upload"])
						{
							updata[qdisc] = updata[qdisc].slice(updata[qdisc].length - data_wanted, updata[qdisc].length);
						}

						for(var qdisc in dataarray[timestamps[timestamps.length - 1]]["download"])
						{
							dndata[qdisc] = dndata[qdisc].slice(dndata[qdisc].length - data_wanted, dndata[qdisc].length);
						}

						// intialize upline datas for upload
                                                var uplineUpl   = { };
                                                var downlineUpl = { };
						// Compute overall stats
						var overall_tx_cur  = 0;
						var overall_tx_avg  = 0;
						var overall_tx_peak = 0;
						// fetch upline and downline datas
						var toadditf = [ ];
						for(var itf in updata)
						{
							var data_tx_avg  = 0;
							var data_tx_peak = 0;
                                                        uplineUpl[itf]  = [ ];
                                                        downlineUpl[itf]= [ ];
							for (var i = 0; i < updata[itf].length; i++)
							{
								var tx_bot=0;
								for(var j=0; j < toadditf.length; j++)
								{
									tx_bot += updata[toadditf[j]][i];
								}
								uplineUpl[itf][i] = updata[itf][i] + tx_bot;
								data_tx_peak = Math.max(data_tx_peak, updata[itf][i]);
								data_max_upl = Math.max(data_max_upl, uplineUpl[itf][i]);

								if (i > 0)
								{
									data_tx_avg = (data_tx_avg + updata[itf][i]) / 2;
								}
								else
								{
									data_tx_avg = updata[itf][i];
								}
								if(toadditf.length)
								{
									downlineUpl[itf][i] = uplineUpl[toadditf[toadditf.length-1]][i];
								}
							}
							toadditf.push(itf);
							// Compute overall values
							overall_tx_cur += updata[itf][updata[itf].length-1];
							overall_tx_avg += data_tx_avg;
							overall_tx_peak+= data_tx_peak;
							if(document.getElementById(itf + '_upload_cur'))
							{
								var label = document.getElementById(itf + '_upload_cur');
								label.innerHTML = bandwidth_label(updata[itf][updata[itf].length-1]);
							}
							if(label = document.getElementById(itf + '_upload_avg'))
							{
								label.innerHTML = bandwidth_label(data_tx_avg);
							}
							if(document.getElementById(itf + '_upload_peak'))
							{
								var label = document.getElementById(itf + '_upload_peak');
								label.innerHTML = bandwidth_label(data_tx_peak);
							}
						}
						// Update stats labels
						if(document.getElementById('overall_upload_cur'))
						{
							var label = document.getElementById('overall_upload_cur');
							label.innerHTML = bandwidth_label(overall_tx_cur);
						}
						if(label = document.getElementById('overall_upload_avg'))
						{
							label.innerHTML = bandwidth_label(overall_tx_avg);
						}
						if(document.getElementById('overall_upload_peak'))
						{
							var label = document.getElementById('overall_upload_peak');
							label.innerHTML = bandwidth_label(overall_tx_peak);
						}
						data_scale_upl = height / (data_max_upl * 1.1);

						/* now draw top line */
						var keys = Object.keys(uplineUpl);
						if (keys.length)
						{
							var itf = keys[keys.length - 1];
							if (typeof uptopline != "object")
                                                        {
                                                                uptopline = Gup.getElementById('tx');
								uptopline.setAttributeNS(null, 'style', 'stroke:DimGray;stroke-width:3;stroke-linecap="round";fill:;fill-opacity:0;');
								/* Move line on top */
								var father = uptopline.parentNode;
								father.removeChild(uptopline);
								father.appendChild(uptopline);
                                                        }
                                                        var y_tx = 0;
                                                        /* plot data */
                                                        var pt_tx = '0,' + height;
                                                        // draw polygon
                                                        for (var i = 0; i < uplineUpl[itf].length; i++)
                                                        {
                                                                var x = i * step;
                                                                y_tx = height - Math.floor((uplineUpl[itf][i]) * data_scale_upl);
                                                                pt_tx += ' ' + x + ',' + y_tx;
                                                        }
                                                        // draw last tangant point in upline graph
                                                        pt_tx += ' ' + width + ',' + y_tx;
                                                        pt_tx += ' ' + width + ',' + height;

                                                        uptopline.setAttribute('points', pt_tx);
						}

                                                for (var itf in uplineUpl)
                                                {
                                                        var y_tx = 0;
                                                        var pt_tx = '0,' + height;

                                                        // draw polygon
                                                        for (var i = 0; i < uplineUpl[itf].length; i++)
                                                        {
                                                                var x = i * step;

                                                                y_tx = height - Math.floor((uplineUpl[itf][i]) * data_scale_upl);
                                                                pt_tx += ' ' + x + ',' + y_tx;
                                                        }
                                                        // draw last tangant point in upline graph
                                                        pt_tx += ' ' + width + ',' + y_tx;
                                                        pt_tx += ' ' + width + ',' + height;

                                                        for (var i = downlineUpl[itf].length - 1; i >= 0; i--)
                                                        {
                                                                var x = i * step;

                                                                y_tx = height - Math.floor((downlineUpl[itf][i] - 10) * data_scale_upl);
                                                                if(i == downlineUpl[itf].length - 1)
                                                                {
                                                                        pt_tx += ' ' + width + ',' + height;
                                                                        pt_tx += ' ' + width + ',' + y_tx;
                                                                }
                                                                pt_tx += ' ' + x + ',' + y_tx;
                                                        }
                                                        // go back to right bottom corner to correctly fill polyline
                                                        pt_tx += ' ' + 0 + ',' + height;
                                                        pt_tx += ' ' + width + ',' + height;
                                                        // Draw polygon
                                                        upPolygons[itf].setAttribute('points', pt_tx);

                                                        labelup_25.html(bandwidth_label(1.1 * 0.25 * data_max_upl, true));
                                                        labelup_50.html(bandwidth_label(1.1 * 0.50 * data_max_upl, true));
                                                        labelup_75.html(bandwidth_label(1.1 * 0.75 * data_max_upl, true));
                                                }

						// intialize upline datas for download
                                                var uplineDnl   = { };
                                                var downlineDnl = { };
						// Compute overall stats
						var overall_rx_cur  = 0;
						var overall_rx_avg  = 0;
						var overall_rx_peak = 0;
						// fetch upline and downline datas
						var toadditf = [ ];
						for(var itf in dndata)
						{
							var data_rx_avg  = 0;
							var data_rx_peak = 0;
                                                        uplineDnl[itf]  = [ ];
                                                        downlineDnl[itf]= [ ];
							for (var i = 0; i < dndata[itf].length; i++)
							{
								var rx_bot=0;
								for(var j=0; j < toadditf.length; j++)
								{
									rx_bot += dndata[toadditf[j]][i];
								}
								uplineDnl[itf][i] = dndata[itf][i] + rx_bot;
								data_rx_peak = Math.max(data_rx_peak, dndata[itf][i]);
								data_max_dnl = Math.max(data_max_dnl, uplineDnl[itf][i]);

								if (i > 0)
								{
									data_rx_avg = (data_rx_avg + dndata[itf][i]) / 2;
								}
								else
								{
									data_rx_avg = dndata[itf][i];
								}
								if(toadditf.length)
								{
									downlineDnl[itf][i] = uplineDnl[toadditf[toadditf.length-1]][i];
								}
							}
							toadditf.push(itf);
							// Compute overall values
							overall_rx_cur += dndata[itf][dndata[itf].length-1];
							overall_rx_avg += data_rx_avg;
							overall_rx_peak+= data_rx_peak;
							if(document.getElementById(itf + '_download_cur'))
							{
								var label = document.getElementById(itf + '_download_cur');
								label.innerHTML = bandwidth_label(dndata[itf][dndata[itf].length-1]);
							}
							if(label = document.getElementById(itf + '_download_avg'))
							{
								label.innerHTML = bandwidth_label(data_rx_avg);
							}
							if(document.getElementById(itf + '_download_peak'))
							{
								var label = document.getElementById(itf + '_download_peak');
								label.innerHTML = bandwidth_label(data_rx_peak);
							}
						}
						// Update stats labels
						if(document.getElementById('overall_download_cur'))
						{
							var label = document.getElementById('overall_download_cur');
							label.innerHTML = bandwidth_label(overall_rx_cur);
						}
						if(label = document.getElementById('overall_download_avg'))
						{
							label.innerHTML = bandwidth_label(overall_rx_avg);
						}
						if(document.getElementById('overall_download_peak'))
						{
							var label = document.getElementById('overall_download_peak');
							label.innerHTML = bandwidth_label(overall_rx_peak);
						}
						data_scale_dnl = height / (data_max_dnl * 1.1);

						/* now draw top line */
						var keys = Object.keys(uplineDnl);
						if (keys.length)
						{
							var itf = keys[keys.length - 1];
							if (typeof dntopline != "object")
                                                        {
                                                                dntopline = Gdn.getElementById('rx');
								dntopline.setAttributeNS(null, 'style', 'stroke:DimGray;stroke-width:3;stroke-linecap="round";fill:;fill-opacity:0;');
								/* Move line on top */
								var father = dntopline.parentNode;
								father.removeChild(dntopline);
								father.appendChild(dntopline);
                                                        }
                                                        var y_rx = 0;
                                                        /* plot data */
                                                        var pt_rx = '0,' + height;
                                                        // draw polygon
                                                        for (var i = 0; i < uplineDnl[itf].length; i++)
                                                        {
                                                                var x = i * step;
                                                                y_rx = height - Math.floor((uplineDnl[itf][i]) * data_scale_dnl);
                                                                pt_rx += ' ' + x + ',' + y_rx;
                                                        }
                                                        // draw last tangant point in upline graph
                                                        pt_rx += ' ' + width + ',' + y_rx;
                                                        pt_rx += ' ' + width + ',' + height;

                                                        dntopline.setAttribute('points', pt_rx);
						}

                                                for (var itf in uplineDnl)
                                                {
                                                        var y_rx = 0;
                                                        var pt_rx = '0,' + height;

                                                        // draw polygon
                                                        for (var i = 0; i < uplineDnl[itf].length; i++)
                                                        {
                                                                var x = i * step;

                                                                y_rx = height - Math.floor((uplineDnl[itf][i]) * data_scale_dnl);
                                                                pt_rx += ' ' + x + ',' + y_rx;
                                                        }
                                                        // draw last tangant point in upline graph
                                                        pt_rx += ' ' + width + ',' + y_rx;
                                                        pt_rx += ' ' + width + ',' + height;

                                                        for (var i = downlineDnl[itf].length - 1; i >= 0; i--)
                                                        {
                                                                var x = i * step;

                                                                y_rx = height - Math.floor((downlineDnl[itf][i] - 10) * data_scale_dnl);
                                                                if(i == downlineDnl[itf].length - 1)
                                                                {
                                                                        pt_rx += ' ' + width + ',' + height;
                                                                        pt_rx += ' ' + width + ',' + y_rx;
                                                                }
                                                                pt_rx += ' ' + x + ',' + y_rx;
                                                        }
                                                        // go back to right bottom corner to correctly fill polyline
                                                        pt_rx += ' ' + 0 + ',' + height;
                                                        pt_rx += ' ' + width + ',' + height;
                                                        // Draw polygon
                                                        dnPolygons[itf].setAttribute('points', pt_rx);

                                                        labeldn_25.html(bandwidth_label(1.1 * 0.25 * data_max_dnl, true));
                                                        labeldn_50.html(bandwidth_label(1.1 * 0.50 * data_max_dnl, true));
                                                        labeldn_75.html(bandwidth_label(1.1 * 0.75 * data_max_dnl, true));
                                                }
					}
				);
			}
		}, 1000
	);

// Set 1h reload page timer because of suspected SVG graph memmory leak
window.setTimeout(function()
{
        if (activating == false)
                location.reload(true)
}, 3600000)

//]]></script>

<link rel="stylesheet" type="text/css" href="<%=resource%>/ovh/css/ovh-common.css">

<script type="text/javascript">
document.write('\
<style type="text/css">\
.free1::before{\
	content: "--";\
	color:  '+ stringToColour("free1") +';\
	font-weight: bold;\
	font-size: 20px;\
	margin-right: 5px;\
}\
.ovh1::before{\
	content: "--";\
	color:  '+ stringToColour("ovh1") +';\
	font-weight: bold;\
	font-size: 20px;\
	margin-right: 5px;\
}\
.ovh2::before{\
	content: "--";\
	color:  '+ stringToColour("ovh2") +';\
	font-weight: bold;\
	font-size: 20px;\
	margin-right: 5px;\
}\
.if1::before{\
	content: "--";\
	color:  '+ stringToColour("if1") +';\
	font-weight: bold;\
	font-size: 20px;\
	margin-right: 5px;\
}\
.if2::before{\
	content: "--";\
	color: '+ stringToColour("if2") +';\
	font-weight: bold;\
	font-size: 20px;\
	margin-right: 5px;\
}\
.if3::before{\
	content: "--";\
	color:  '+ stringToColour("if3") +';\
	font-weight: bold;\
	font-size: 20px;\
	margin-right: 5px;\
}\
.if4::before{\
	content: "--";\
	color:  '+ stringToColour("if4") +';\
	font-weight: bold;\
	font-size: 20px;\
	margin-right: 5px;\
}\
.if5::before{\
	content: "--";\
	color: '+ stringToColour("if5") +';\
	font-weight: bold;\
	font-size: 20px;\
	margin-right: 5px;\
}\
</style>'
);
</script>

<h2><%:Traffic Control%></h2>

<div class="graph-section">
	<div class="title"><%:Upload%></div>
	<div class="graph-main">
		<div class="graph-y-axis-info" style="height: 265px;">
			<div class="label-25" id="up_label_25">-</div>
			<div class="label-50" id="up_label_50">-</div>
			<div class="label-75" id="up_label_75">-</div>
		</div>
		<div class="graph-visual">
			<embed id="upsvg"  class="svg-graph" style="width:100%; height:265px;" src="<%=resource%>/bandwidth.svg" />
			<div class="graph-time-scale" style="text-align:right"><small id="upscale">-</small></div>
		</div>
		<div id="up-x-axis-info" class="graph-x-axis-info"></div>
	</div>
	<div class="graph-footer">
		<table style="width:100%; table-layout:fixed" cellspacing="5" id="upload_stats">
		</table>
	</div>
	<div class="clear"></div>
</div>

<div class="graph-section">
	<div class="title"><%:Download%></div>
	<div class="graph-main">
		<div class="graph-y-axis-info" style="height: 265px;">
			<div class="label-25" id="dn_label_25">-</div>
			<div class="label-50" id="dn_label_50">-</div>
			<div class="label-75" id="dn_label_75">-</div>
		</div>
		<div class="graph-visual">
			<embed id="dnsvg"  class="svg-graph" style="width:100%; height:265px;" src="<%=resource%>/bandwidth.svg" />
			<div class="graph-time-scale" style="text-align:right"><small id="dnscale">-</small></div>
		</div>
		<div  id="dn-x-axis-info" class="graph-x-axis-info"></div>
	</div>
	<div class="graph-footer">
		<table style="width:100%; table-layout:fixed" cellspacing="5" id="download_stats">
			<tr>
				<td></td>
				<td><strong><%:Current%></strong></td>
				<td><strong><%:Average%></strong></td>
				<td><strong><%:Peak%></strong></td>
			</tr>
		</table>
	</div>
	<div class="clear"></div>
</div>

<%+footer%>
