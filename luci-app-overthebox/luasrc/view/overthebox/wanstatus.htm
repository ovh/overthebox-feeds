<%
-- Copyright 2015 OVH (OverTheBox@ovh.net)
-- Simon Lelievre (simon.lelievre@corp.ovh.com)
-- Sebastien Duponcheel (sebastien.duponcheel@ovh.net)
--
-- This file is part of OverTheBox for OpenWrt.
--
--    OverTheBox is free software: you can redistribute it and/or modify
--    it under the terms of the GNU General Public License as published by
--    the Free Software Foundation, either version 3 of the License, or
--    (at your option) any later version.
--
--    OverTheBox is distributed in the hope that it will be useful,
--    but WITHOUT ANY WARRANTY; without even the implied warranty of
--    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--    GNU General Public License for more details.
--
--    You should have received a copy of the GNU General Public License
--    along with OverTheBox.  If not, see (http://www.gnu.org/licenses/)
-%>
<link rel="stylesheet" type="text/css" href="<%=resource%>/ovh/css/wanstatus.css"/>
<script type="text/javascript">//<![CDATA[
	XHR.poll(5, '/cgi-bin/luci/admin/overthebox/interfaces_status', null,
		function(x, mArray)
		{
			var status = document.getElementById('overthebox_status');

			var temp = '<figure class="tree">';
			temp += '<ul>';
			if (mArray.overthebox)
			{
				if (mArray.overthebox.remote_from_lease)
				{
					if (stepbar)
						stepbar.securedNetwork.status = "done";
					temp += '<li class="remote-from-lease">';
					temp += '<a href="#">';

					var equipmentIcon = '<img src="<%=resource%>/computer.png" />';
					var title = String.format('<br /><strong>%s (%s)</strong>', mArray.overthebox.remote_hostname ? mArray.overthebox.remote_hostname : 'You', mArray.overthebox.remote_addr)
					var statusMessageClass = "";
					var statusIcon = "<%=resource%>/ovh/images/statusOK.png";
					var statusMessage = "";
					var content = "";

					temp += getNetworkNodeTemplate(equipmentIcon, statusIcon, title, statusMessageClass,statusMessage,content);
					temp += '</a>'
				}

				/*
				var color = "rgb(240, 144, 144)";
				if (mArray.overthebox.socks_service) 
				{
					color = "rgb(144, 240, 144)";
					if (mArray.overthebox.tun_service)
					{
						color = "rgb(144, 240, 144)";
					}
					else
					{
						color = "rgb(224,224,224)";
					}
				}
				else
				{
					color = "rgb(240, 144, 144)";
				}
				*/

				temp += '<li id="networkRootNode"><table><tr><td><a href="#">';
				
				var equipmentIcon = '<img src="<%=resource%>/overthebox.png" style:"top: 0px;" />';
				var title = String.format("OverTheBox (%s)", mArray.overthebox.wan_addr || mArray.overthebox.local_addr);
				var statusMessageClass = "";
				var statusIcon = "<%=resource%>/ovh/images/statusOK.png";
				var statusMessage = "";
				var content = "";

				if (mArray.overthebox.version)
				{
					content += "Version " + mArray.overthebox.version;
					if(mArray.overthebox.downloading === true)
						content += ' <strong style="color: red">downloading updates...</strong>';
					if(mArray.overthebox.install_updates === true)
						content += ' <strong style="color: red">installing updates...</strong>';
					content += "<br />";
				}
				if (mArray.overthebox.loadavg)
				{
					content += "Load : " + mArray.overthebox.loadavg;
					content += "<br />";
				}
				if (mArray.overthebox.core_temp)
				{
					content += "Core temp : " + (mArray.overthebox.core_temp / 1000).toFixed(1) + " &#176;";
					content += "<br />";
				}
				if (mArray.overthebox.uptime)
				{
					var date = new Date(null);
					content += "Uptime : " + String.format('%t', mArray.overthebox.uptime);
					content += "<br />";
				}
				if (mArray.overthebox.dhcpd)
				{
					for ( dhcpd in mArray.overthebox.dhcpd )
					{
						if (stepbar)
							stepbar.dhcp.status = "done"
						var dhcp = mArray.overthebox.dhcpd[dhcpd];
						content += String.format('<span style="text-transform:capitalize;">%s</span> address: %s<br />', dhcp.interface, dhcp.router)
						content += String.format('<span style="text-transform:capitalize;">%s</span> range: %s - %s<br />', dhcp.interface, dhcp.range_start, dhcp.range_end)
					}
				}
				else
				{
					temp += String.format('lan (%s)', mArray.overthebox.local_addr);
				}

				if (mArray.overthebox.socks_service == false)
				{
					temp += String.format('Socks service is not running');
				}
				if (mArray.overthebox.tun_service == false)
				{
					temp += String.format('TUN service is not running');
				}

				if(statusMessage !== "")
				{
					statusMessageClass = "error";
					statusIcon = "<%=resource%>/ovh/images/statusError.png";
				}

				temp += getNetworkNodeTemplate(equipmentIcon, statusIcon, title, statusMessageClass,statusMessage,content);
				temp += '</a></td>'
			}
			if (mArray.wans)
			{
				temp += '<td><ul>';
				for( var i = 0; i < mArray.wans.length; i++ )
				{
					// Get link color
					mArray.wans[i].color = stringToColour(mArray.wans[i].name)
					// Mwan status infos and colors
					var stat = '';
					var cssc = '';
					switch (mArray.wans[i].status)
					{
						case 'online':
							stat = 'Online (tracking active)';
							cssc = 'rgb(144, 240, 144)';
							statusIcon = "<%=resource%>/ovh/images/statusOK.png";
							statusMessageClass = "";
							statusMessage = "";
							break;
						case 'notMonitored':
							stat = 'Online (tracking off)';
							cssc = 'rgb(144, 240, 144)';
							statusIcon = "<%=resource%>/ovh/images/statusWarning.png";
							statusMessageClass = "warning";
							statusMessage = "";
							break;
						case 'offline':
							stat = 'Offline';
							cssc = 'rgb(240, 144, 144)';
							statusIcon = "<%=resource%>/ovh/images/statusError.png";
							statusMessageClass = "error";
							statusMessage = "";
							break;
						case 'notEnabled':
							stat = 'Disabled';
							cssc = 'rgb(224,224,224)';
							statusIcon = "<%=resource%>/ovh/images/statusError.png";
							statusMessageClass = "error";
							statusMessage = "";
							break;
					}
					// Select color following multipath status
					switch (mArray.wans[i].multipath)
					{
						case 'off':
							cssc = 'rgb(255,153,51)';
						case 'failover':
							cssc = 'rgb(224,224,224)';
						case 'handover':
							cssc = 'rgb(255,153,51)';
					}
					// Populate info
					var curping = Math.floor(mArray.wans[i].curping);
					var minping = Math.floor(mArray.wans[i].minping);
					var avgping = Math.floor(mArray.wans[i].avgping);
					var wanip   = mArray.wans[i].wanip;
					var whois   = mArray.wans[i].whois;
					var multipath = mArray.wans[i].multipath;
					// Generate template
					if(mArray.overthebox.remote_from_lease == true && mArray.wans.length == 1)
					{
						temp += String.format('<li class="subnode-only-child"><a href="%q">', mArray.wans[i].link);
					}else{
						temp += String.format('<li><a href="%q">', mArray.wans[i].link);
					}

					var equipmentIcon = String.format('<embed id="modem_%s" onload="setColorSVG(\'modem_%s\', \'%s\')" src="<%=resource%>/modem.svg" />', mArray.wans[i].name, mArray.wans[i].name, mArray.wans[i].color);
					var title = mArray.wans[i].label + " (" + mArray.wans[i].gateway + ")";
					var content = String.format('%s<br />wan address: <strong>%s</strong><br />whois: %s<br />ping: %s ms<br />multipath: %s', stat, wanip, whois ? whois : "", curping, multipath);
					if(mArray.wans[i].qos)
					{
						content += String.format('<br />traffic control: %s/%s kbps (%s)',
										mArray.wans[i].download == 0 ? "off" : mArray.wans[i].download,
										mArray.wans[i].upload == 0 ? "off" : mArray.wans[i].upload,
										mArray.wans[i].qos
						)
					}
					temp += getNetworkNodeTemplate(equipmentIcon, statusIcon, title, statusMessageClass,statusMessage,content);

					temp += '</a></li>';
				}

				// Check
				if (mArray.overthebox && mArray.overthebox.remote_from_lease == false)
				{
					if (stepbar)
					{
						stepbar.securedNetwork.status = "doing";
					}

					temp += '<li>';
					temp += '<a href="#">';

					var equipmentIcon = '<img src="<%=resource%>/computer.png" />';
					var title = String.format("You (%s)", mArray.overthebox.remote_addr);
					var statusMessageClass = "warning";
					var statusIcon = "<%=resource%>/ovh/images/statusWarning.png";
					var statusMessage = "Your IP was not leased by OverTheBox";

					var content = "Please unplug and plug your ethernet cable or turn off and on your Wifi";

					temp += getNetworkNodeTemplate(equipmentIcon, statusIcon, title, statusMessageClass,statusMessage,content);
					temp += '</a></li>';
				}

				temp += '</ul></td></tr></table>';

			}
			temp += '</li>';
			if (mArray.overthebox && mArray.overthebox.remote_from_lease)
				temp += '</ul></li>';
			// Close tree
			temp += '</ul>';
			temp += '</figure>';
			status.innerHTML = temp;
		}
	);

	function setColorSVG(embed_id, color)
	{
		var embed = document.getElementById(embed_id);
		try {
			svg = embed.getSVGDocument ? embed.getSVGDocument() : embed.contentDocument;
		}
		catch(e) {
			svg = document.embeds[embed_id].getSVGDocument();
		}
		if(svg)
		{
			var back = svg.getElementById('backgound_modem');
			back.setAttribute('style', 'fill: ' + color + ';fill-opacity:0.6;');
		}
	}

	function getNetworkNodeTemplate(equipmentIcon, statusIcon, title, statusMessageClass, statusMessage, content)
	{
		return 	String.format(	'<div class="network-node">' +
									'<div class="equipment-icon">%s</div>' +
									'<div class="status-icon"><img src="%s" /></div>' +
									'<div class="info">' +
										'<div class="title">%s</div>' +
										'<div class="status-message %s">%s</div>' +
										'<div class="content">%s</div>' +
										'<div class="clear"></div>' +
									'</div>' +
									'<div class="clear"></div>' +
								'</div>',
								equipmentIcon, statusIcon, title, statusMessageClass, statusMessage, content);
	}

//]]></script>

<h2><%:Network overview%></h2>
<fieldset id="interface_field" class="cbi-section">
	<!--	<legend><%:Network overview%></legen> -->
	<div id="overthebox_status"></div>
</fieldset>
