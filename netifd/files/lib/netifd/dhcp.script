#!/bin/sh
# vim: set noexpandtab tabstop=4 shiftwidth=4 softtabstop=4 :

[ -z "$1" ] && echo "Error: should be run by udhcpc" && exit 1

. /lib/functions.sh
. /lib/netifd/netifd-proto.sh

set_classless_routes() {
	local max=128
	while [ -n "$1" -a -n "$2" -a $max -gt 0 ]; do
		proto_add_ipv4_route "${1%%/*}" "${1##*/}" "$2" "$ip"
		max=$(($max-1))
		shift 2
	done
}

setup_interface () {
	if [ $INTERFACE = "if0" ]; then
		logger no set up interface
		return
	fi
	logger set DHCP info to $INTERFACE

	# We update ip information
	uci set network.$INTERFACE.ipaddr="$ip"
	uci set network.$INTERFACE.gateway="$router"
	uci commit

	proto_init_update "*" 1
	proto_add_ipv4_address "$ip" "${subnet:-255.255.255.0}"
	# TODO: apply $broadcast

	for i in $router; do
		proto_add_ipv4_route "$i" 32 "" "$ip"
		proto_add_ipv4_route 0.0.0.0 0 "$i" "$ip"
	done

	# CIDR STATIC ROUTES (rfc3442)
	[ -n "$staticroutes" ] && set_classless_routes $staticroutes
	[ -n "$msstaticroutes" ] && set_classless_routes $msstaticroutes

	for dns in $dns; do
		proto_add_dns_server "$dns"
	done
	for domain in $domain; do
		proto_add_dns_search "$domain"
	done

	proto_add_data
	[ -n "$ZONE" ]     && json_add_string zone "$ZONE"
	[ -n "$ntpsrv" ]   && json_add_string ntpserver "$ntpsrv"
	[ -n "$timesvr" ]  && json_add_string timeserver "$timesvr"
	[ -n "$hostname" ] && json_add_string hostname "$hostname"
	[ -n "$message" ]  && json_add_string message "$message"
	[ -n "$timezone" ] && json_add_int timezone "$timezone"
	[ -n "$lease" ]    && json_add_int leasetime "$lease"
	proto_close_data

	proto_send_update "$INTERFACE"


	if [ "$IFACE6RD" != 0 -a -n "$ip6rd" ]; then
		local v4mask="${ip6rd%% *}"
		ip6rd="${ip6rd#* }"
		local ip6rdprefixlen="${ip6rd%% *}"
		ip6rd="${ip6rd#* }"
		local ip6rdprefix="${ip6rd%% *}"
		ip6rd="${ip6rd#* }"
		local ip6rdbr="${ip6rd%% *}"

		[ -n "$ZONE" ] || ZONE=$(fw3 -q network $INTERFACE)
		[ -z "$IFACE6RD" -o "$IFACE6RD" = 1 ] && IFACE6RD=${INTERFACE}_6

		json_init
		json_add_string name "$IFACE6RD"
		json_add_string ifname "@$INTERFACE"
		json_add_string proto "6rd"
		json_add_string peeraddr "$ip6rdbr"
		json_add_int ip4prefixlen "$v4mask"
		json_add_string ip6prefix "$ip6rdprefix"
		json_add_int ip6prefixlen "$ip6rdprefixlen"
		json_add_string tunlink "$INTERFACE"
		[ -n "$IFACE6RD_DELEGATE" ] && json_add_boolean delegate "$IFACE6RD_DELEGATE"
		[ -n "$ZONE6RD" ] || ZONE6RD=$ZONE
		[ -n "$ZONE6RD" ] && json_add_string zone "$ZONE6RD"
		[ -n "$MTU6RD" ] && json_add_string mtu "$MTU6RD"
		json_close_object

		ubus call network add_dynamic "$(json_dump)"
	fi
}

deconfig_interface() {
	proto_init_update "*" 0
	proto_send_update "$INTERFACE"
}

# TODO: this code needs a **big** refresh
setup_uci() {
	MACPREFIX="42:42:42"

	# Test if we have a lease router
	if [ -n "$router" ]; then

		# Test if the leased ip is private
		if /usr/bin/owipcalc "$ip" quiet private; then

			KNOWN_ROUTER=$(uci show network | grep '\.gateway=' | grep -v '@route' | grep "'$router'")
			if [ -z "$KNOWN_ROUTER" ]; then

				# Initialize the lan base interface
				if [ "$(uci get -q network.lan.proto)" != "static" ]; then
					IF="lan"
					uci set network.$IF="interface"
					uci set network.$IF.ifname="$IF"
					uci set network.$IF.type="macvlan"
					uci set network.$IF.interface="eth0"
					uci set network.$IF.proto="static"
					uci set network.$IF.ipaddr="$ip"
					uci set network.$IF.netmask="$subnet"
					uci set network.$IF.multipath="off"
					uci set network.$IF.metric="0"
					# Save and clear current mac address of if0
					MACADDR=$(uci get network.if0.macaddr)
					uci delete network.if0.macaddr
					MACSUFFIX=$(hexdump -n3 -e'3/1 ":%02x"' /dev/urandom)
					IF0_MACADDR="$MACPREFIX$MACSUFFIX"
					uci set network.if0.macaddr="$IF0_MACADDR"
					# Transfer mac address to $IF
					uci set network.$IF.macaddr="$MACADDR"
					# Save settings
					uci commit network
					uci commit firewall
					# Force update of if0 mac address
					ifup if0
					ifconfig if0 hw ether "$IF0_MACADDR"
					# Bring up $IF interface
					/sbin/hotplug-call net
					ifup $IF
					pkill -USR1 udhcpc
					return
				fi

				# Find a free interface index
				IND=0
				IF="if$IND"
				while uci -q get network.$IF 1>/dev/null; do
					IND=$((IND + 1))
					IF="if$IND"
				done

				# Save and clear current mac address of if0
				MACADDR=$(uci get network.if0.macaddr)
				uci delete network.if0.macaddr
				MACSUFFIX=$(hexdump -n3 -e'3/1 ":%02x"' /dev/urandom)
				IF0_MACADDR="$MACPREFIX$MACSUFFIX"
				uci set network.if0.macaddr="$IF0_MACADDR"

				# Convert info from dhcp server to a static interface
				uci set network.$IF="interface"
				uci set network.$IF.ifname="$IF"
				uci set network.$IF.type="macvlan"
				uci set network.$IF.interface="eth0"
				uci set network.$IF.proto="static"
				uci set network.$IF.ipaddr="$ip"
				uci set network.$IF.netmask="$subnet"
				uci set network.$IF.multipath="on"
				uci set network.$IF.gateway="$router"
				uci set network.$IF.dns="$dns"
				uci set network.$IF.metric="$IND"
				uci set network.$IF.macaddr="$MACADDR"

				# Setup firewall
				LANZONE=$(uci show firewall | grep ".name='mptcp'" | sed -e "s/.name=.*//")
				if [ -z "$LANZONE" ]; then
					uci add firewall zone
					uci set firewall.@zone[-1].name='mptcp'
					uci set firewall.@zone[-1].input='DROP'
					uci set firewall.@zone[-1].forward='DROP'
					uci set firewall.@zone[-1].output='ACCEPT'
					uci set firewall.@zone[-1].masq='1'
					uci set firewall.@zone[-1].network=''

					uci add firewall forwarding
					uci set firewall.@forwarding[-1].src='mptcp'
					uci set firewall.@forwarding[-1].dest='lan'

					uci add firewall forwarding
					uci set firewall.@forwarding[-1].src='lan'
					uci set firewall.@forwarding[-1].dest='mptcp'

					LANZONE=$(uci show firewall | grep ".name='mptcp'" | sed -e "s/.name=.*//")
				fi
				LANIFS=$(uci get "$LANZONE.network")
				uci set "$LANZONE.network=$LANIFS $IF"

				# Save settings
				uci commit network
				uci commit firewall
				# Force update of if0 mac address
				ifup if0
				ifconfig if0 hw ether "$IF0_MACADDR"
				# Bring up $IF interface
				/sbin/hotplug-call net
				ifup $IF
			fi

		else

			ISPUBLIC="true"
			# Handler for bridge modem
			KNOWN_WANIP=$(uci show network | grep '\.ipaddr=' | grep "'$ip'")

			if [ -z "$KNOWN_WANIP" ]; then

				if [ "$(uci get -q network.lan.proto)" != "static" ]; then
					IF="lan"
					uci set network.$IF="interface"
					uci set network.$IF.ifname="$IF"
					uci set network.$IF.type="macvlan"
					uci set network.$IF.interface="eth0"
					uci set network.$IF.proto="static"
					uci set network.$IF.ipaddr="192.168.99.1"
					uci set network.$IF.netmask="255.255.255.0"
					uci set network.$IF.multipath="off"
					uci set network.$IF.metric="0"
					# start a dhcp server
					uci set dhcp.$IF=dhcp
					uci set dhcp.$IF.interface="lan"
					uci set dhcp.$IF.ignore="0"
					uci set dhcp.$IF.force="1"
					uci set dhcp.$IF.start="50"
					uci set dhcp.$IF.limit="200"
					uci set dhcp.$IF.leasetime="12h"
				fi

				# Get mac address of the router
				if /sbin/ifconfig "$INTERFACE" "$ip" netmask "$subnet"; then
					DHCPMACADDR=$(/usr/bin/arping "$router" -c 1 -w 1000 -I "$INTERFACE" | grep reply | grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}')
					# Clear subinterface ip
					/sbin/ifconfig "$INTERFACE" 0 2>/dev/null
				fi

				# Find a free interface index
				IND=0
				IF="if$IND"
				while uci -q get network.$IF 1>/dev/null; do
					IND=$((IND + 1))
					IF="if$IND"
				done

				# Save and clear current mac address of if0
				MACADDR=$(uci get network.if0.macaddr)
				uci delete network.if0.macaddr
				MACSUFFIX=$(hexdump -n3 -e'3/1 ":%02x"' /dev/urandom)
				IF0_MACADDR="$MACPREFIX$MACSUFFIX"
				uci set network.if0.macaddr="$IF0_MACADDR"

				# if we found mac address of the modem create the new interface
				if [ -n "$DHCPMACADDR" ]; then
					# Convert info from dhcp server to a static interface
					uci set network.$IF="interface"
					uci set network.$IF.ifname="$IF"
					uci set network.$IF.type="macvlan"
					uci set network.$IF.interface="eth0"
					uci set network.$IF.proto="static" # Should be dhcp to support dynamic ip, but we officialy does not support bridge mode
					uci set network.$IF.multipath="on"
					uci set network.$IF.ipaddr="$ip"
					uci set network.$IF.netmask="$subnet"
					uci set network.$IF.gateway="$router"
					uci set network.$IF.dns="$dns"
					uci set network.$IF.metric="$IND"
					uci set network.$IF.macaddr="$MACADDR"

					# Setup firewall
					LANZONE=$(uci show firewall | grep ".name='mptcp'" |sed -e "s/.name=.*//")
					if [ -z "$LANZONE" ]; then
							uci add firewall zone
							uci set firewall.@zone[-1].name='mptcp'
							uci set firewall.@zone[-1].input='ACCEPT'
							uci set firewall.@zone[-1].forward='ACCEPT'
							uci set firewall.@zone[-1].output='ACCEPT'
							uci set firewall.@zone[-1].masq='1'
							uci set firewall.@zone[-1].network=''

							uci add firewall forwarding
							uci set firewall.@forwarding[-1].src='mptcp'
							uci set firewall.@forwarding[-1].dest='lan'
							uci add firewall forwarding
							uci set firewall.@forwarding[-1].src='mptcp'
							uci set firewall.@forwarding[-1].dest='vpn'

							uci add firewall forwarding
							uci set firewall.@forwarding[-1].src='lan'
							uci set firewall.@forwarding[-1].dest='mptcp'
							uci add firewall forwarding
							uci set firewall.@forwarding[-1].src='vpn'
							uci set firewall.@forwarding[-1].dest='mptcp'

							LANZONE=$(uci show firewall | grep ".name='mptcp'" | sed -e "s/.name=.*//")
					fi
					LANIFS=$(uci get "$LANZONE.network")
					uci set "$LANZONE.network=$LANIFS $IF"

					# Save settings
					uci commit network
					uci commit firewall
					# Force update of if0 mac address
					ifup if0
					ifconfig if0 hw ether "$IF0_MACADDR"
					# Bring up $IF interface
					/sbin/hotplug-call net
					ifup $IF
				else
					# ignore dhcp request
					pkill -USR1 udhcpc
					return
				fi
			else
				# ignore dhcp request
				pkill -USR1 udhcpc
				return
			fi
		fi
	fi

	if [ "$ISPUBLIC" != "true" ]; then
		/bin/touch /etc/config/dhcpdiscovery
		uci set "dhcpdiscovery.$INTERFACE=lease"
		uci set "dhcpdiscovery.$INTERFACE.timestamp=$(date +%s)"
		env | while read -r line ; do
			name=${line%=*}
			[ "$name" = "$line" ] && continue
			case "$name" in
				SHLVL|HOME|TERM|PWD|BOOT_IMAGE|PATH)
					/bin/false
				;;
				*)
					value=
					eval value="\$$name"
					uci set "dhcpdiscovery.$INTERFACE.$name=$value"
				;;
			esac
		done
		uci commit dhcpdiscovery
	fi
}

case "$1" in
	deconfig)
		deconfig_interface
	;;
	renew|bound)
		[ "$INTERFACE" = if0 ] && setup_uci
		setup_interface
	;;
esac

# user rules
[ -f /etc/udhcpc.user ] && . /etc/udhcpc.user

exit 0
