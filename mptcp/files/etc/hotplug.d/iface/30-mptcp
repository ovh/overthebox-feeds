#!/bin/sh
# vim: set noexpandtab tabstop=4 shiftwidth=4 softtabstop=4 :

# Load the multipath config
#
# Author: Mario Krueger <openwrt at xedp3x.de>
# Released under GPL 3 or later

[ "$ACTION" = ifup -o "$ACTION" = ifupdate ] || exit 0

enable=$(uci -q get network.globals.multipath) || exit 0

if [ "$enable" = "disable" ]; then
	echo "0" > /proc/sys/net/mptcp/mptcp_enabled
elif [ "$enable" = "enable" ]; then
	echo "1" > /proc/sys/net/mptcp/mptcp_enabled
else
	exit 0
fi

. /lib/functions.sh
. /lib/functions/network.sh

id=0
count=301

set_default() {
	local mode
	local config="$1"
	count=$((count+1))
	[ "$config" = "$INTERFACE" ] && id=$count
	config_get mode "$config" multipath
	[ "$mode" = "master" ] && {
		local gateway
		network_get_gateway gateway "$config" || {
			logger -t multipath "master device $DEVICE has no gateway!"
			logger -t multipath "disable mtcp on $DEVICE"
			multipath "$DEVICE" off
			#Fallback: use upcomming interface...
			network_get_gateway gateway "$INTERFACE"
			config=$INTERFACE
		}
		local iface
		config_get iface "$config" ifname
		ip route del default
		ip route add default scope global nexthop via "$gateway" dev "$iface" || {
			#Fallback: use upcomming interface...
			network_get_gateway gateway "$INTERFACE"
			ip route add default scope global nexthop via "$gateway" dev "$INTERFACE"
			logger -t multipath "Failed to set default multipath device! Use $INTERFACE as fallback..."
		}
	}
}

config_load network
config_foreach set_default interface

[ $id = 0 ] && {
	logger -t multipath "device $INTERFACE not found!"
	echo "device $INTERFACE not found!"
	exit 1
}

mode=$(uci -q get "network.$INTERFACE.multipath") || mode='off'

case "$mode" in
	"off")
		multipath "$DEVICE" off
		exit 0;;
	"master")
		mode="on";;
	"on");;
	"backup");;
	"handover");;
	*)
		logger -t multipath "Wrong multipath value for device $DEVICE"
		exit 1;;
esac

# Update kernel flags
multipath "$DEVICE" "$mode"

# IPv4 Updates:

local ipaddr
local gateway
local subnet
network_get_ipaddr	ipaddr	"$INTERFACE" || exit 1
network_get_gateway gateway "$INTERFACE" || exit 1
network_get_subnet	subnet "$INTERFACE" || exit 1

# Fills the env values NETWORK and PREFIX needed to add the route
eval "$(ipcalc.sh "$subnet")"

ip rule del table $id
ip route flush table $id
ip rule add from "$ipaddr" table "$id" pref $(( 10000 + id ))
ip route add "$NETWORK/$PREFIX" dev "$DEVICE" scope link table "$id"
ip route add default via "$gateway" dev "$DEVICE" table "$id"
