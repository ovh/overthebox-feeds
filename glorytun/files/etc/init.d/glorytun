#!/bin/sh /etc/rc.common
# Copyright (C) 2015 ovh.com

START=90
STOP=10

USE_PROCD=1
PROG=/usr/sbin/glorytun.sh

validate_section() {
    uci_validate_section glorytun tunnel "${1}" \
        'enable:bool:0'        \
        'key:string'           \
        'server:string'        \
        'port:uinteger'        \
        'congestion:string'    \
        'delay:bool:0'         \
        'dev:string'           \
        'iplocal:string'       \
        'ippeer:string'        \
        'mtu:uinteger'         \
        'pref:uinteger'        \
        'table:uinteger'       \
        'metric:uinteger'      \
        'multiqueue:bool:0'    \
        'txqlen:uinteger'      \
        'buffer_size:uinteger' \
        'noquickack:bool:0'
}

start_instance() {
    validate_section "${1}" || {
        echo "validation failed"
        return 1
    }

    [ "$enable" = "1" ] || return 1
    [ -n "$server" ] || return 1
    [ -n "$port" ] || return 1
    [ -n "$key" ] || return 1
    [ -n "$iplocal" ] || return 1
    [ -n "$ippeer" ] || return 1
    [ -n "$dev" ] || return 1

    if [ -z "$metric" ]; then
        metric=$(uci -q get network.$dev.metric)
    fi

    mkdir -p "/tmp/glorytun"
    echo -n "$key" > /tmp/glorytun/$s.key
    key=""

    procd_open_instance
    procd_set_param command "$PROG" keyfile /tmp/glorytun/$s.key

    procd_append_param env GLORYTUN_HOST="${server}"
    procd_append_param env GLORYTUN_PORT="${port}"
    procd_append_param env GLORYTUN_DEV="${dev}"
    procd_append_param env GLORYTUN_IP_LOCAL="${iplocal}"
    procd_append_param env GLORYTUN_IP_PEER="${ippeer}"
    procd_append_param env GLORYTUN_TABLE="${table}"
    procd_append_param env GLORYTUN_PREF="${pref:-0}"
    procd_append_param env GLORYTUN_METRIC="${metric}"
    procd_append_param env GLORYTUN_MTU="${mtu:-1450}"
    procd_append_param env GLORYTUN_TXQLEN="${txqlen:-1000}"

    [ "$multiqueue" -eq 1 ] && procd_append_param command multiqueue

# if process dies sooner than respawn_threshold, it is considered crashed and
# after respawn_retry retries the service is stopped
# procd_set_param respawn ${respawn_threshold:-3600} ${respawn_timeout:-5} ${respawn_retry:-5}
    procd_set_param respawn 15 30 0

    procd_set_param stdout 1
    procd_set_param stderr 1

    procd_close_instance
}

start_service() {
    config_load 'glorytun'
    config_foreach start_instance 'tunnel'
}

stop_service() {
# be sure, all is down
    killall glorytun
}
