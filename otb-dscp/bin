#!/bin/sh
# vim: set noexpandtab tabstop=4 shiftwidth=4 softtabstop=4 :

set -e

# shellcheck disable=SC1091
. /lib/overthebox

# shellcheck disable=SC1091
. /lib/functions.sh

# Get the lan interface name
lan_device=
config_load network
config_get lan_device lan ifname

config_load dscp

_log() {
	logger -t otb-dscp "$@"
}

_ipt() {
	iptables -w -t mangle "$@"
}

_add_dscp_rule() {
	_ipt -A dscp_prerouting -p "$proto" -s "$src_ip" -d "$dest_ip" "$@" -m comment --comment "$comment" -j DSCP --set-dscp-class "$class"
	_ipt -A dscp_prerouting -p "$proto" -s "$src_ip" -d "$dest_ip" "$@" -m comment --comment "$comment" -j RETURN
}

_add_dscp_rules() {
	proto=""     ; config_get proto "$1" proto all
	src_ip=""    ; config_get src_ip "$1" src_ip 0.0.0.0/0
	src_port=""  ; config_get src_port "$1" src_port 0:65535
	dest_ip=""   ; config_get dest_ip "$1" dest_ip 0.0.0.0/0
	dest_port="" ; config_get dest_port "$1" dest_port 0:65535
	class=""     ; config_get class "$1" class
	direction="" ; config_get direction "$1" direction "upload"
	comment=""   ; config_get comment "$1" comment "-"

	case "$direction" in
		upload)
			# Apply the rule locally
			case "$proto" in
				tcp|udp)
					_add_dscp_rule -m multiport --sports "$src_port" -m multiport --dports "$dest_port"
					;;
				*)
					_add_dscp_rule
					;;
			esac
			;;
		download)
			# Send the route to the remote server
			otb_todo otb_call_api POST "dscp" -d@- <<-EOF
			{
				"proto": "$proto",
				"src_ip": "$src_ip",
				"src_port": "$src_port",
				"dest_ip": "$dest_ip",
				"dest_port": "$dest_port",
				"class": "$class"
			}
			EOF
			;;
	esac
}

_add_prerouting_chain() {
	_ipt -N "$1"
	_ipt -I PREROUTING -i "$lan_device" -j "$1"
}

_add_dscp_output_chain() {
	_ipt -N dscp_output
	_ipt -I OUTPUT -j dscp_output
}

_remove_prerouting_chain() {
	_ipt -F "$1" 2>/dev/null || return 0
	_ipt -D PREROUTING -i "$lan_device" -j "$1"
	_ipt -X "$1"
}

_remove_output_chain() {
	_ipt -F "$1" 2>/dev/null || return 0
	_ipt -D OUTPUT -j "$1"
	_ipt -X "$1"
}

_stop() {
	_remove_prerouting_chain dscp_prerouting
	_remove_output_chain dscp_output

	otb_todo otb_call_api DELETE "dscp" </dev/null
}

_start() {
	# Add chains
	_add_prerouting_chain dscp_prerouting
	_add_dscp_output_chain

	# Add rules base on the user configuration
	config_foreach _add_dscp_rules classify
}

dscp_count=0

_check() {
	configured_count=$(otb_call_api GET qos | jq '.dscp | length')
	dscp_count=0
	config_foreach _count_remote_dscp classify
	[ "$configured_count" = "$dscp_count" ] && return 0

	_log "$dscp_count DSCP rules are configured but only $configured_count are applied. Need to restart"
	_stop
	_start
}

_count_remote_dscp() {
	direction=
	config_get direction "$1" direction
	[ "$direction" = download ] || return 0

	dscp_count=$((dscp_count+1))
}

case "$1" in
	start)
		_log "Starting"
		_start
		;;
	stop)
		_stop
		;;
	check)
		_check
		;;
	*) exit 1 ;;
esac
