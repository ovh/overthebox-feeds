#!/bin/sh
# vim: set noexpandtab tabstop=4 shiftwidth=4 softtabstop=4 :

# This program is free software modified by Bash; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.

. ${SQM_LIB_DIR}/defaults.sh

egress() {

	if [ "$(uci -q get glorytun.xtun0.enable)" == "1" ]; then
		XTUN0_PORT=$(uci -q get glorytun.xtun0.port || echo "5009")
	fi

	########################

	# Delete existing queue
	$TC qdisc del dev ${IFACE} root 2> /dev/null
	# Traffic classes:
	# 1:2 Reserved traffic
	# 1:3 Network control traffic
	# 1:4 Realtime traffic
	# 1:5 Signaling traffic
	# 1:6 Normal traffic
	# 1:7 Scavenger traffic

	# add HFSC root qdisc
	$TC qdisc add dev ${IFACE} root handle 1: `get_stab_string` hfsc default 6


	# add main rate limit class
	$TC class add dev ${IFACE} parent 1: classid 1:1 hfsc \
		sc rate ${UPLINK}kbit ul rate ${UPLINK}kbit

	# Reserved traffic: guarantee realtime full uplink for 100ms, then
	# 50% of the uplink

	$TC class add dev ${IFACE} parent 1:1  classid 1:2 hfsc \
		rt m1   ${UPLINK}kbit d  100ms m2 $((5*$UPLINK/10))kbit \
		ls m1   ${UPLINK}kbit d  100ms m2 $((7*$UPLINK/10))kbit \
		ul rate ${UPLINK}kbit

	# Network control traffic: guarantee realtime full uplink for 50ms, then
	# 30% of the uplink

	$TC class add dev ${IFACE} parent 1:1  classid 1:3 hfsc \
		rt m1   ${UPLINK}kbit d  50ms m2 $((3*$UPLINK/10))kbit \
		ls m1   ${UPLINK}kbit d  50ms m2 $((5*$UPLINK/10))kbit \
		ul rate ${UPLINK}kbit



	# Realtime: guarantee full uplink for 200ms, then 30%
	$TC class add dev ${IFACE} parent 1:1  classid 1:4 hfsc \
		sc m1 ${UPLINK}kbit d 200ms m2 $((3*$UPLINK/10))kbit \
		ul rate ${UPLINK}kbit

	# Signalling: Don't guarantee anything for the first second, then
	# guarantee 10%

	$TC class add dev ${IFACE} parent 1:1  classid 1:5 hfsc \
		sc m1         0 d    1s m2 $((1*$UPLINK/10))kbit \
		ul rate ${UPLINK}kbit

	# Normal traffic: don't guarantee anything for the first two seconds,
	# then guarantee 5%

	$TC class add dev ${IFACE} parent 1:1  classid 1:6 hfsc \
		sc m1         0 d    2s m2 $((1*$UPLINK/20))kbit \
		ul rate ${UPLINK}kbit

	# Scavenger traffic: don't guarantee anything for the first 10 seconds,
	# then guarantee 5%

	$TC class add dev ${IFACE} parent 1:1  classid 1:7 hfsc \
		sc m1         0 d   10s m2 $((1*$UPLINK/20))kbit \
		ul rate ${UPLINK}kbit

	################

	$TC qdisc add dev ${IFACE} parent 1:2 handle 12: ${QDISC} \
		`get_limit ${ELIMIT}` `get_target "${ETARGET}" ${UPLINK}` `get_ecn ${EECN}` \
		`get_quantum  300` `get_flows ${PRIO}` ${EQDISC_OPTS}
	$TC qdisc add dev ${IFACE} parent 1:3 handle 13: ${QDISC} \
		`get_limit ${ELIMIT}` `get_target "${ETARGET}" ${UPLINK}` `get_ecn ${EECN}` \
		`get_quantum  300` `get_flows ${NORMAL}` ${EQDISC_OPTS}
	$TC qdisc add dev ${IFACE} parent 1:4 handle 14: ${QDISC} \
		`get_limit ${ELIMIT}` `get_target "${ETARGET}" ${UPLINK}` `get_ecn ${EECN}` \
		`get_quantum  300` `get_flows ${BULK}` ${EQDISC_OPTS}
	$TC qdisc add dev ${IFACE} parent 1:5 handle 15: ${QDISC} \
		`get_limit ${ELIMIT}` `get_target "${ETARGET}" ${UPLINK}` `get_ecn ${EECN}` \
		`get_quantum  300` `get_flows ${BULK}` ${EQDISC_OPTS}
	$TC qdisc add dev ${IFACE} parent 1:6 handle 16: ${QDISC} \
		`get_limit ${ELIMIT}` `get_target "${ETARGET}" ${UPLINK}` `get_ecn ${EECN}` \
		`get_quantum  300` `get_flows ${BULK}` ${EQDISC_OPTS}
	$TC qdisc add dev ${IFACE} parent 1:7 handle 17: ${QDISC} \
		`get_limit ${ELIMIT}` `get_target "${ETARGET}" ${UPLINK}` `get_ecn ${EECN}` \
		`get_quantum  300` `get_flows ${BULK}` ${EQDISC_OPTS}

	# QoS for xtun0
	if [ -n "${XTUN0_PORT}" ]; then
		$TC filter add dev ${IFACE} parent 1:0 protocol all prio 1 u32 match ip dport ${XTUN0_PORT} 0xffff  flowid 1:3
	fi

	# ToS based QoS
	$TC filter add dev ${IFACE} parent 1:0 protocol all prio 1 u32 match ip tos 0x20 0xfc flowid 1:7
	$TC filter add dev ${IFACE} parent 1:0 protocol all prio 1 u32 match ip tos 0x40 0xfc flowid 1:6
	$TC filter add dev ${IFACE} parent 1:0 protocol all prio 1 u32 match ip tos 0x60 0xfc flowid 1:5
	$TC filter add dev ${IFACE} parent 1:0 protocol all prio 1 u32 match ip tos 0x80 0xfc flowid 1:5
	$TC filter add dev ${IFACE} parent 1:0 protocol all prio 1 u32 match ip tos 0xa0 0xfc flowid 1:4
	$TC filter add dev ${IFACE} parent 1:0 protocol all prio 1 u32 match ip tos 0xc0 0xfc flowid 1:3
	$TC filter add dev ${IFACE} parent 1:0 protocol all prio 1 u32 match ip tos 0xe0 0xfc flowid 1:2

}

ingress() {
	return
}

sqm_start() {
	[ -n "${IFACE}" ] || return 1
	[ -z "$DEV" ] && DEV=$( get_ifb_for_if ${IFACE} )
	do_modules
	verify_qdisc "hfsc"
	verify_qdisc ${QDISC}
	sqm_log "Starting ${SCRIPT}"

	eth_setup
	#ipt_setup

	if [ "${UPLINK}" -ne 0 ];
	then
		egress
		sqm_log "egress shaping activated"
	else
		sqm_log "egress shaping deactivated"
		$TC qdisc del dev ${IFACE} root 2> /dev/null
	fi
	if [ "${DOWNLINK}" -ne 0 ];
	then
		verify_qdisc ingress "ingress" || return 1
		ingress
		sqm_log "ingress shaping activated"
	else
		sqm_log "ingress shaping deactivated"
		$TC qdisc del dev ${DEV} root 2> /dev/null
		$TC qdisc del dev ${IFACE} ingress 2> /dev/null
	fi
	return 0
}

sqm_stop() {
	$TC qdisc del dev ${IFACE} ingress 2> /dev/null
	$TC qdisc del dev ${IFACE} root 2> /dev/null
	[ -n "$CUR_IFB" ] && $TC qdisc del dev ${CUR_IFB} root 2> /dev/null
	[ -n "$CUR_IFB" ] && sqm_log "${0}: ${CUR_IFB} shaper deleted"
	[ -n "$CUR_IFB" ] && $IP link set dev ${CUR_IFB} down
	[ -n "$CUR_IFB" ] && $IP link delete ${CUR_IFB} type ifb
	[ -n "$CUR_IFB" ] && sqm_log "${0}: ${CUR_IFB} interface deleted"
}
