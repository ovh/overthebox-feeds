diff --git a/src/dnsmasq.h b/src/dnsmasq.h
index 06fae35..f8bc8de 100644
--- a/src/dnsmasq.h
+++ b/src/dnsmasq.h
@@ -239,7 +239,8 @@ struct event_desc {
 #define OPT_MAC_B64        54
 #define OPT_MAC_HEX        55
 #define OPT_TFTP_APREF_MAC 56
-#define OPT_LAST           57
+#define OPT_FILTER_AAAA    57
+#define OPT_LAST           58
 
 /* extra flags for my_syslog, we use a couple of facilities since they are known 
    not to occupy the same bits as priorities, no matter how syslog.h is set up. */
diff --git a/src/option.c b/src/option.c
index 064ef62..dd58ff0 100644
--- a/src/option.c
+++ b/src/option.c
@@ -160,6 +160,7 @@ struct myoption {
 #define LOPT_DHCPTTL       348
 #define LOPT_TFTP_MTU      349
 #define LOPT_REPLY_DELAY   350
+#define LOPT_FILTER_AAAA   351
  
 #ifdef HAVE_GETOPT_LONG
 static const struct option opts[] =  
@@ -322,6 +323,7 @@ static const struct myoption opts[] =
     { "quiet-dhcp6", 0, 0, LOPT_QUIET_DHCP6 },
     { "quiet-ra", 0, 0, LOPT_QUIET_RA },
     { "dns-loop-detect", 0, 0, LOPT_LOOP_DETECT },
+    { "filter-aaaa", 0, 0, LOPT_FILTER_AAAA },
     { "script-arp", 0, 0, LOPT_SCRIPT_ARP },
     { "dhcp-ttl", 1, 0 , LOPT_DHCPTTL },
     { "dhcp-reply-delay", 1, 0, LOPT_REPLY_DELAY },
@@ -497,6 +499,7 @@ static struct {
   { LOPT_IGNORE_ADDR, ARG_DUP, "<ipaddr>", gettext_noop("Ignore DNS responses containing ipaddr."), NULL }, 
   { LOPT_DHCPTTL, ARG_ONE, "<ttl>", gettext_noop("Set TTL in DNS responses with DHCP-derived addresses."), NULL }, 
   { LOPT_REPLY_DELAY, ARG_ONE, "<integer>", gettext_noop("Delay DHCP replies for at least number of seconds."), NULL },
+  { LOPT_FILTER_AAAA, OPT_FILTER_AAAA, NULL, gettext_noop("Filter all AAAA requests."), NULL },
   { 0, 0, NULL, NULL, NULL }
 }; 
 
diff --git a/src/rfc1035.c b/src/rfc1035.c
index 059b57b..48f8ead 100644
--- a/src/rfc1035.c
+++ b/src/rfc1035.c
@@ -1507,6 +1507,16 @@ size_t answer_request(struct dns_header *header, char *limit, size_t qlen,
 	        break;
 #endif
 	      
+          //patch to filter aaaa forwards
+          //found : https://gist.github.com/bearice/7d3dc0e63e003d752622
+          if (qtype == T_AAAA && option_bool(OPT_FILTER_AAAA) ){
+              //return a null reply
+              ans = 1;
+              if (!dryrun) log_query(F_CONFIG | F_IPV6 | F_NEG, name, &addr, NULL);
+              break;
+          }
+          //end of patch
+          
 	      if (qtype != type && qtype != T_ANY)
 		continue;
 	      
