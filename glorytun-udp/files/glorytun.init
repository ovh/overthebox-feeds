#!/bin/sh /etc/rc.common
# Copyright (C) 2015 ovh.com

START=90
STOP=10

USE_PROCD=1
PROG_NAME=glorytun-udp
PROG=/usr/sbin/${PROG_NAME}.sh

_log() {
        logger -p daemon.info -t ${PROG_NAME} "$@"
}

_err() {
        logger -p daemon.err -t ${PROG_NAME} "$@"
}

validate_section() {
    uci_validate_section glorytun mud "${1}" \
        'enable:bool:0'        \
        'key:string'           \
        'server:string'        \
        'port:uinteger'        \
        'dev:string'           \
        'iplocal:string'       \
        'ippeer:string'        \
        'mtu:uinteger'         \
        'pref:uinteger'        \
        'table:uinteger'       \
        'metric:uinteger'
}

start_instance() {
    local enable key server port dev iplocal ippeer mtu pref table metric

    validate_section "${1}" || {
        _err "validation failed"
        return 1
    }

    [ "$enable" = "1" ] || return 1

    [ -n "$server" ] || return 1
    [ -n "$port" ] || return 1
    [ -n "$key" ] || return 1
    [ -n "$iplocal" ] || return 1
    [ -n "$ippeer" ] || return 1
    [ -n "$dev" ] || return 1

    if [ -z "$metric" ]; then
        metric=$(uci -q get network.$dev.metric)
    fi

    echo -n "$key" > /tmp/${PROG_NAME}.key
    key=""

    procd_open_instance
    procd_set_param command ${PROG} ${PROG_NAME} keyfile /tmp/${PROG_NAME}.key

    procd_append_param env GLORYTUN_HOST="${server}"
    procd_append_param env GLORYTUN_PORT="${port}"
    procd_append_param env GLORYTUN_DEV="${dev}"
    procd_append_param env GLORYTUN_IP_LOCAL="${iplocal}"
    procd_append_param env GLORYTUN_IP_PEER="${ippeer}"
    procd_append_param env GLORYTUN_TABLE="${table}"
    procd_append_param env GLORYTUN_PREF="${pref:-0}"
    procd_append_param env GLORYTUN_METRIC="${metric}"
    procd_append_param env GLORYTUN_MTU="${mtu:-1450}"
    procd_append_param env GLORYTUN_TXQLEN="${txqlen:-1000}"

    # if process dies sooner than respawn_threshold, it is considered crashed and
    # after respawn_retry retries the service is stopped
    # procd_set_param respawn ${respawn_threshold:-3600} ${respawn_timeout:-5} ${respawn_retry:-5}
    procd_set_param respawn 15 30 0

    procd_set_param stdout 1
    procd_set_param stderr 1

    procd_close_instance
}

stop_service() {
    # Get the PIDs, there should be only one PID but the pidof command returns
    # an array of PIDs, let's handle this as if multiple values were returned
    PIDs=$(pidof ${PROG_NAME}.sh)
    [ -z "${PIDs}" ] && return

    # Send a term signal to the PIDs
    for pid in ${PIDs}; do
        /bin/kill -TERM "${pid}"
    done

    # Wait for the statefile
    config_load 'glorytun'
    config_foreach wait_for_statefile 'mud'
}

wait_for_statefile() {
    ifname=$1
    statefile="/tmp/glorytun.${ifname}.fifo"

    # Wait 3 seconds for the statefile to be removed
    for i in 1 2 3; do
        [ ! -p "${statefile}" ] && break
        _log "statefile still present, let's wait"
        sleep 1
    done

    # Check the statefile, it should not be here anymore
    if [ -p "${statefile}" ];
    then
        _err "statefile should not be present"
        rm -f "${statefile}"
    else
        _log "statefile removed"
    fi
}

start_service() {
    _log "starting glorytun service"
    config_load 'glorytun'
    config_foreach start_instance 'mud'
    _log "glorytun service started"
}
