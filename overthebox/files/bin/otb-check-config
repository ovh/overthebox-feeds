#!/bin/sh
# shellcheck disable=SC1091,SC2039
# vim: set noexpandtab tabstop=4 shiftwidth=4 softtabstop=4 :

. /lib/functions/network.sh
. /lib/overthebox

[ "$(uci -q get "network.tun0")" = "interface" ] || otb-action-configure

# Check and fix LAN setup

if [ "$(uci -q get "network.lan_rule")" != rule ]; then
	otb_info "setup missing lan rule"
	uci -q batch <<-EOF
	set network.lan_rule=rule
	set network.lan_rule.lookup=50
	set network.lan_rule.priority=100
	EOF
fi

for iface in $(uci -q get firewall.lan.network); do
	if [ "$(uci -q get "network.$iface.ip4table")" != 50 ]; then
		otb_info "setup missing network table to lan for $iface"
		uci -q set "network.$iface.ip4table=50"
	fi
done

# Automatically assign a DHCP interface to new devices

for p in /sys/class/net/*; do
	[ -d "$p/device" ] || continue

	ifname="$(basename "$p")"
	iface="${ifname}_dhcp"

	uci -q show network | grep -s -q "$ifname" && continue

	otb_info "create dhcp interface for $ifname"

	uci -q batch <<-EOF
	set network.$iface=interface
	set network.$iface.ifname=$ifname
	set network.$iface.proto=dhcp

	del_list firewall.wan.network=$iface
	add_list firewall.wan.network=$iface
	EOF
done

OTB_PATH_LIST=

for iface in $(uci -q get firewall.wan.network); do
	[ "$iface" = wan ] && continue

	ifname="$(uci -q get "network.$iface.ifname")"
	[ "$ifname" ] || continue

	if [ "$(uci -q get "network.${iface}_rule")" != rule ]; then
		table="$(uci -q get "network.$iface.ip4table")"

		if [ -z "$table" ]; then
			table=200
			while uci -q show network | grep -s -q "ip4table='$table'"; do
				table=$((table+1))
			done
		fi

		otb_info "setup missing network rule to $table for $iface"

		uci -q batch <<-EOF
		set network.$iface.ip4table=$table
		set network.${iface}_rule=rule
		set network.${iface}_rule.lookup=$table
		set network.${iface}_rule.priority=30200
		EOF
	fi

	ipaddr=
	network_get_ipaddr ipaddr "$iface"
	[ "$ipaddr" ] || continue

	state="$(uci -q get "network.$iface.multipath")"

	case "$(ip -o route get from "$ipaddr" to 8.8.8.8)" in
		*"dev $ifname table"*) ;;
		*) state="down" ;;
	esac

	upload="$(uci -q get "network.$iface.upload")"
	download="$(uci -q get "network.$iface.download")"

	if [ -z "$upload" ]; then
		upload=125000
		otb_info "setup missing upload to $upload for $iface"
		uci -q set "network.$iface.upload=$upload"
	fi

	if [ -z "$download" ]; then
		download=2500000
		otb_info "setup missing download to $download for $iface"
		uci -q set "network.$iface.download=$download"
	fi

	OTB_PATH_LIST="$OTB_PATH_LIST $ipaddr"

	case "$state" in
		on|up|'') glorytun path "$ipaddr" up rate rx "$download" tx "$upload" 2>/dev/null ;;
		backup)   glorytun path "$ipaddr" backup 2>/dev/null ;;
		*)        glorytun path "$ipaddr" down   2>/dev/null ;;
	esac
done

# Remove old paths

glorytun path | dd obs=1M 2>/dev/null | while read -r _ _ _ IP _; do
	case "$OTB_PATH_LIST" in
		*" $IP"*) ;;
		*) glorytun path "$IP" down 2>/dev/null ;;
	esac
done

uci -q commit firewall
uci -q commit network
