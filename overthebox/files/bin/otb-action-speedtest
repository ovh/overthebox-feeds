#!/bin/sh
# shellcheck disable=SC1091,SC2039
# vim: set noexpandtab tabstop=4 shiftwidth=4 softtabstop=4 :

. /lib/overthebox

test_time=5       # Do the iperf during 5 seconds
skip_test_time=1  # Skip the data of the first second of the test

server_ip="$(uci -q get glorytun.tun0.server)" || {
	otb_err "Couldn't find server ip"
	exit 1
}

. /lib/functions.sh
. /lib/functions/network.sh

trap : HUP INT TERM

setup() {
	otb_call_api POST ipt/iperf >/dev/null || return
	/etc/init.d/otb-qos stop 2>/dev/null   || true
}

cleanup() {
	otb_call_api DELETE ipt/iperf >/dev/null
	/etc/init.d/otb-qos start
}

speedtest() {
	local ipaddr gateway

	network_get_ipaddr ipaddr "$1"
	[ "$ipaddr" ] || return

	network_get_gateway gateway "$1"
	[ "$gateway" ] || return

	do_iperf() {
		iperf3 --client "$server_ip" --port 5008 \
		       --time "$test_time" --omit "$skip_test_time" \
		       --bind "$ipaddr" --json "$@" \
			   | jq "(.end.sum_received.bits_per_second // 0) / 1000 | floor"
	}

	# loop five times max to handle speedtest timeout when determining upload speed
	for i in $(seq 1 1 5); do
		upload="$(do_iperf)" || return
		if [ "$upload" -ne 0 ]; then
			break
		fi
	done

	# loop five times max to handle speedtest timeout when determining download speed
	for i in $(seq 1 1 5); do
		download="$(do_iperf -R)" || return
		if [ "$download" -ne 0 ]; then
			break
		fi
	done

	printf "[%8s]  Upload: %8s kbits/s  Download: %8s kbit/s\\n" "$1" "$upload" "$download"
}

if setup; then
	if [ "$(uci -q get "network.$1")" = interface ]; then
		speedtest "$1"
	else
		config_load network
		config_foreach speedtest interface
	fi
	cleanup
else
	otb_err "Couldn't start iperf3"
	exit 1
fi
