#!/bin/sh
# shellcheck disable=SC2154,SC1091,SC2039
# vim: set noexpandtab tabstop=4 shiftwidth=4 softtabstop=4 :

action="$1"

_log() {
	logger -p daemon.info -t "udhcpc.user" "$@"
}

[ -z "$router" ] && exit 0

manage_wan() {
	case "$action" in
	renew|bound)
		;;
	*)
		exit 0
		;;
	esac

	# Guess the new interface id
	_id=1
	while uci -q get network.if$_id >/dev/null; do
		_id=$((_id+1))
	done

	_macaddr=$(cat "/sys/class/net/$INTERFACE/address")
	_ifname=$(uci -q get "network.${INTERFACE}_dev.ifname")

	uci -q show network | grep -sq "network\\.if.*\\.gateway='$router'" && exit

	if uci -q get "network.lan_if${_id}" >/dev/null; then
		uci -q batch <<-EOF
		set network.if${_id}_dev=device
		set network.if${_id}_dev.name=if$_id
		set network.if${_id}_dev.type=macvlan
		set network.if${_id}_dev.ifname=$_ifname
		set network.if${_id}_dev.macaddr=$_macaddr
		set network.if${_id}=interface
		set network.if${_id}.ifname=if$_id
		set network.if${_id}.proto=static
		set network.if${_id}.ipaddr=$ip
		set network.if${_id}.netmask=$subnet
		set network.if${_id}.multipath=on
		set network.if${_id}.gateway="$router"
		set network.if${_id}.dns="$dns"
		set network.${INTERFACE}_dev.macaddr=auto.if$_id
		commit network

		add_list firewall.wan.network=if$_id
		commit firewall

		set dhcp.if${_id}=dhcp
		set dhcp.if${_id}.interface=if${_id}
		set dhcp.if${_id}.start=1
		set dhcp.if${_id}.leasetime=12h
		set dhcp.if${_id}.dynamicdhcp=0
		set dhcp.if${_id}.force=1
		set dhcp.if${_id}_gw=tag
		add_list dhcp.if${_id}_gw.dhcp_option=1,$subnet
		add_list dhcp.if${_id}_gw.dhcp_option=3,$router
		add_list dhcp.if${_id}_gw.dhcp_option=6,${dns// /,}
		commit dhcp
		EOF
	else
		# lan_ifX are IP aliases on the lan
		# Those are needed in order to tell the DHCP server to bind on the LAN and
		# offer static leases on all its ranges
		uci -q batch <<-EOF
		set network.lan_if${_id}=interface
		set network.lan_if${_id}.proto=static
		set network.lan_if${_id}.ifname=$(uci -q get network.lan.ifname)
		set network.lan_if${_id}.ipaddr=$ip
		set network.lan_if${_id}.netmask=$subnet
		set network.${INTERFACE}_dev.macaddr=auto.lan_if$_id
		commit network
		EOF
	fi
}

_check_ip() {
	original_ip="$ip"

	# Naively increment the last part of the IP to find an unused one
	while ip -4 -o addr | grep -s -v "$INTERFACE" | grep -s -q "inet $ip/"; do
		ip="${ip%.*}.$((${ip##*.}+1))"
	done

	[ "$original_ip" != "$ip" ] && ipcalc.sh "$ip" | grep -s -q "IP=$ip"
}

manage_cifX() {
	[ "$action" != "bound" ] && exit

	_check_ip && uci -q batch <<-EOF
	set network.$INTERFACE.proto=static
	set network.$INTERFACE.ipaddr=$ip
	set network.$INTERFACE.netmask=$subnet
	set network.$INTERFACE.gateway="$router"
	set network.$INTERFACE.dns=$dns
	set network.$INTERFACE.mtu=$mtu
	commit network
	EOF
}

_log "got udhcpc $action on $INTERFACE"

case "$INTERFACE" in
	wan)
		manage_wan ;;
	cif*)
		manage_cifX ;;
esac

[ -d /var/run/config.check ] || reload_config
