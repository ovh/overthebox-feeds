#!/bin/sh
# shellcheck disable=SC2154,SC1091,SC2039
# vim: set noexpandtab tabstop=4 shiftwidth=4 softtabstop=4 :

_log() {
	logger -p daemon.info -t "udhcpc.user" "$@"
}

manage_wan() {
	uci -q show network | grep -sq "network\\.if.*\\.gateway='$router'" && return

	# Guess the new interface id
	_id=1
	while uci -q get "network.if$_id" >/dev/null; do
		_id=$((_id+1))
	done

	_ifname="$(uci -q get "network.${INTERFACE}_dev.ifname")" || return
	_macaddr="$(cat "/sys/class/net/$DEVICE/address")" || return

	_log "create interface if$_id with ip $ip"

	uci -q batch <<-EOF
	set network.if${_id}_dev=device
	set network.if${_id}_dev.name=if$_id
	set network.if${_id}_dev.type=macvlan
	set network.if${_id}_dev.ifname=$_ifname
	set network.if${_id}_dev.macaddr=$_macaddr
	set network.if${_id}=interface
	set network.if${_id}.ifname=if$_id
	set network.if${_id}.proto=static
	set network.if${_id}.ipaddr=$ip
	set network.if${_id}.netmask=$subnet
	set network.if${_id}.multipath=on
	set network.if${_id}.gateway="$router"
	set network.if${_id}.dns="$dns"
	set network.${INTERFACE}_dev.macaddr=auto.if$_id
	commit network

	add_list firewall.wan.network=if$_id
	commit firewall
	EOF
}

fix_ip() {
	original_ip="$ip"

	# Naively increment the last part of the IP to find an unused one
	while ip -4 -o addr | grep -s -v "$DEVICE" | grep -s -q "inet $ip/"; do
		ip="${ip%.*}.$((${ip##*.}+1))"
	done

	[ "$original_ip" = "$ip" ] && return 0
	ipcalc.sh "$ip" | grep -s -q "IP=$ip" || return 1

	deconfig_interface
	setup_interface
}

DEVICE="$interface"

case "$1" in
	bound|renew) ;;
	*) exit 0 ;;
esac

[ "$INTERFACE" ] || exit 0
[ "$DEVICE"    ] || exit 0
[ "$ip"        ] || exit 0
[ "$router"    ] || exit 0

_log "got udhcpc $1 on $INTERFACE"

case "$INTERFACE" in
	wan) manage_wan ;;
	*) fix_ip ;;
esac

[ -d /var/run/config.check ] || reload_config
