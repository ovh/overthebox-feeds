# vim: set ft=sh noexpandtab tabstop=4 shiftwidth=4 softtabstop=4 :

: ${OTB_DEVICE_ID:=$(uci -q get overthebox.me.device_id)}
: ${OTB_SERVICE_ID:=$(uci -q get overthebox.me.service)}
: ${OTB_TOKEN:=$(uci -q get overthebox.me.token)}
: ${OTB_DEBUG:=$(uci -q get overthebox.me.debug)}
: ${OTB_TODO_DIR:="/tmp/otb-todo"}
: ${OTB_HEADERS_FILE:="/tmp/otb-daemon-headers"}

otb_alert() {
	logger -t otb -p 1 "$*" || true
}

otb_crit() {
	logger -t otb -p 2 "$*" || true
}

otb_err() {
	logger -t otb -p 3 "$*" || true
}

otb_warn() {
	logger -t otb -p 4 "$*" || true
}

otb_notice() {
	logger -t otb -p 5 "$*" || true
}

otb_info() {
	logger -t otb -p 6 "$*" || true
}

otb_debug()  {
	# shellcheck disable=SC2015
	[ -n "$OTB_DEBUG" ] && logger -t otb -p 7 "$*" || true
}

# shellcheck disable=SC2016
otb_pretty_print() {
	# Try to pretty print as json
	local pretty_output=$(jq -e -n --argjson output "$1" '$output' 2>/dev/null)
	if [ $? -eq "0" ]; then
		echo "$pretty_output"
	else
		echo "$1"
	fi
}

otb_json_get() {
	jq -r -n --argjson content "$1" "\$content.$2"
}

otb_call() {
	method=$1
	path=$2
	shift 2
	otb_debug "call: $method $path $*"
	curl --silent --show-error --max-time 5 \
		-X "$method" \
		-H "Content-Type: application/json" \
		-H "X-Auth-OVH: $OTB_TOKEN" \
		-H "X-Overthebox-Version: $(cat /etc/otb-version || echo 0.0-0)" \
		--dump-header "$OTB_HEADERS_FILE" \
		"https://provisionning.overthebox.net:4443/$path" \
		"$@"
}

otb_call_api() {
	method=$1
	path=$2
	shift 2
	otb_debug "call api: $method $path $*"
	curl --silent --show-error --max-time 1 \
		-X "$method" \
		-H "Content-Type: application/json" \
		"http://api/$path" \
		"$@"
}

otb_device_post() {
	subpath=$1
	shift 1
	[ -n "$OTB_DEVICE_ID" ] && otb_call POST "devices/$OTB_DEVICE_ID/$subpath" "$@"
}

otb_device_get() {
	subpath=$1
	shift 1
	[ -n "$OTB_DEVICE_ID" ] && otb_call GET "devices/$OTB_DEVICE_ID/$subpath" "$@"
}

otb_service_post() {
	subpath=$1
	shift 1
	[ -n "$OTB_SERVICE_ID" ] && otb_device_post "service/$OTB_SERVICE_ID/$subpath" "$@"
}

otb_service_get() {
	subpath=$1
	shift 1
	[ -n "$OTB_SERVICE_ID" ] && otb_device_get "service/$OTB_SERVICE_ID/$subpath" "$@"
}

otb_todo() {
	mkdir -p "$OTB_TODO_DIR"
	(echo "$* <<EOF"; cat -; echo EOF) > "$OTB_TODO_DIR/$(date +%s%N)"
}

otb_save_event() {
	details=$2
	[ -z "$details" ] && details="{}"
	# shellcheck disable=SC2016
	jq -n -c --arg name "$1" --arg timestamp "$(date +%s)" --argjson details "$details" \
		'{event_name: $name, timestamp: $timestamp|tonumber, details: $details}' | otb_todo otb_device_post events -d@-
}

otb_save_action_id() {
	id=$(otb_json_get "$1" id)
	[ -n "$id" ] && [ "$id" != null ] && uci -q batch <<-EOF
	set overthebox.me.action_id=$id
	commit overthebox
	EOF
}
