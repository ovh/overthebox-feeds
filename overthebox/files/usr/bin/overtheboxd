#!/usr/bin/env lua

-- Copyright 2015 OVH
-- Author: Simon Lelievre <sim@ovh.net>
-- Licensed to the public under the GNU General Public License version 3

local p   = require 'posix'
local sig = require "posix.signal"
local overthebox = require 'overthebox'


local json      = require("luci.json")
local uci       = require("luci.model.uci").cursor()

function error(str)
	p.syslog( p.LOG_ERR, str)
end
function log(str)
	p.syslog( p.LOG_NOTICE, str)
end
function debug(str)
	p.syslog( p.LOG_DEBUG, str)
end

run = true
local function handle_exit()
	log("end")
	run = false
end
sig.signal (sig.SIGINT,  handle_exit)

overthebox.debug = true

-- local rcode, ret = overthebox.get_service()
-- if rcode == 200 and ret.service then
--	overthebox.confirm_service(ret.service)
-- end

overthebox.notify_boot()


-- flush last action beforce start, next a reboot or a sysupgrade
local last_action_id = overthebox.get_last_action()
if last_action_id ~= nil then
	print("flush last action")
	overthebox.confirm_action(last_action_id, "done", "done")
	overthebox.flush_action(last_action_id)
end


local delay = 10
while run do
	local rcode, ret = overthebox.status()

	if rcode == 401 then
		rcode, ret = overthebox.subscribe()
		debug("subscribe : ", ret)
		if not rcode then
			error("can not subscribe to api : " .. ret.error )
		end
	elseif rcode == 200 and ret.action then
		local actionreturn
		local msg
		debug("I do : "..ret.action)

		if ret.action == "update" then
			actionreturn, msg = overthebox.opkg_update()
		elseif ret.action == "upgradable" then
			actionreturn, msg = overthebox.opkg_upgradable()
		elseif ret.action == "upgrade" then
			if ret.arguments and ret.arguments.release_channel then
				if not overthebox.check_release_channel( ret.arguments.release_channel ) then
					overthebox.update_release_channel()
				end
			end
			return_update, msg_update = overthebox.opkg_update()
			return_upgrade, msg_upgrade = overthebox.upgrade()
			actionreturn = return_update and return_upgrade
			msg = "Updating repos:\n" .. msg_update .. "\nUpgrading packages:\n" .. msg_upgrade
		elseif ret.action == "updateReleaseChannel" then
			actionreturn, msg = overthebox.update_release_channel()
		elseif ret.action == "sysupgrade" then
			overthebox.backup_last_action(ret.id)
			overthebox.sysupgrade()
			run = false
		elseif ret.action == "configure" then
			actionreturn, services = overthebox.config()
			for i = 1, #services do
			    overthebox.restart(services[i])
			end
			if #services > 1 then
				overthebox.restartmwan3()
			end
			msg = table.concat(services, ", ")
		elseif ret.action == "reboot" then
			overthebox.backup_last_action(ret.id)
			overthebox.reboot()
			run = false
			msg = "ok"
		elseif ret.action == "askServiceConfirmation" then
			actionreturn, msg = overthebox.get_service()
			if actionreturn then
				if msg and msg.service then
					overthebox.ask_service_confirmation(msg.service)
					msg = "ok"
				else
					actionreturn = false
					msg = "can not retreive service"
				end
			end
		elseif ret.action == "refreshProperties" then
			actionreturn, msg = overthebox.send_properties(ret.arguments)
		elseif ret.action == "diagnostic" then
			actionreturn, msg = overthebox.send_diagnostic(ret.id, ret.arguments)
		elseif ret.action == "backup" then
			actionreturn, msg = overthebox.send_backup(ret.id, ret.arguments)
		elseif ret.action == "restore" then
			actionreturn, msg = overthebox.restore_backup(ret.id, ret.arguments)
			if actionreturn then
				overthebox.backup_last_action(ret.id)
				overthebox.reboot()
			end
		elseif ret.action == "remoteAccessPrepare" then
			actionreturn, msg = overthebox.remoteAccessPrepare(ret.arguments)
		elseif ret.action == "remoteAccessConnect" then
			actionreturn, msg = overthebox.remoteAccessConnect(ret.arguments)
		elseif ret.action == "remoteAccessDisconnect" then
			actionreturn, msg = overthebox.remoteAccessDisconnect(ret.arguments)
		elseif ret.action == "wait" then
			delay = ret.arguments.delay or 10
			msg = ""
		else
			actionreturn = false
			msg = "Unknown action: "..ret.action
		end

		if actionreturn ~= nil then
			if actionreturn == true then
				debug("Action " .. ret.action .. " was successful")
				actionreturn = "done"
			else
				debug("Failed to do "..ret.action)
				actionreturn = "error"
				-- If there was an error, the message should be in the error field
				if msg == nil then
					msg = "OTB Unknown error"
				end
				if msg.error ~= nil then
					msg = msg.error
				end
				debug("Got error: "..msg)
			end

			checkConfirm, errTab = overthebox.confirm_action(ret.id, actionreturn, msg)
			if checkConfirm == false then
				if errTab == nil or errTab.error == nil then
					errMsg = "OTB Unknown error while updating action"
				else
					errMsg = errTab.error
				end
				debug("Error while updating action: ".. errMsg)
			end
		end

	end

	if run then
		p.sleep(delay)
	end
end

overthebox.notify_shutdown()

