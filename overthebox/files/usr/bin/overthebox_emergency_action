#!/usr/bin/env lua

-- Copyright 2015 OVH
-- Author: Simon Lelievre <sim@ovh.net>
-- Licensed to the public under the GNU General Public License version 3

-- pure static and autonom script

local json  = require "luci.json"
local sys   = require "luci.sys"

local p   = require 'posix'
local sig = require "posix.signal"

local json      = require("luci.json")
local uci       = require("luci.model.uci")

local http  = require("socket.http")
local https = require("ssl.https")
local ltn12 = require("ltn12")
local io    = require("io")
local os    = require("os")
local string    = require("string")

local VERSION = "<VERSION>"

api_url = 'https://provisionning.overthebox.net:4443/'


function error(str)
	p.syslog( p.LOG_ERR, str)
end
function log(str)
	p.syslog( p.LOG_NOTICE, str)
end
function debug(str)
	p.syslog( p.LOG_DEBUG, str)
end

function status()
    return GET('devices/'.. (uci.cursor():get("overthebox", "me", "device_id", {}) or "null").."/emergency_actions")
end

function check_release_channel(rc)
    local myrc = uci.cursor():get("overthebox", "me", "release_channel", {}) or ""
    return myrc == rc
end

function update_release_channel()
    local uci = uci.cursor()
    local rcode, res = GET('devices/'..uci:get("overthebox", "me", "device_id", {}).."/release_channel")
    if rcode == 200 then
        if res.feeds then
            set_feeds(res.feeds)
        end
        if res.name and res.image_url then
            uci:set("overthebox", "me", "release_channel", res.name)
            uci:set("overthebox", "me", "image_url", res.image_url)
            uci:save('overthebox')
            uci:commit('overthebox')
        end
        return true, "ok"
    end
    return false, "error"
end

-- write feeds in distfeeds.conf file
function set_feeds(feeds)
    local txt = ""
    for i, f in pairs(feeds) do
        txt = txt .. f.type .. " " .. f.name .. " " ..f.url .."\n"
    end

    if txt ~= "" then
        fd = io.open("/etc/opkg/distfeeds.conf", "w")
        if fd then
            fd:write("# generated file, do not edit\n")
            fd:write(txt)
            fd:close()
        end
    end
end

-- exec command local
function restart(service)
    local ret = run("/etc/init.d/"..service.." restart")
    return true, ret
end
function restartmwan3()
    local ret = os.execute("/usr/sbin/mwan3 restart")
    return true, ret
end


function opkg_update()
    local ret = run("opkg update 2>&1")
    return true, ret
end

function opkg_upgradable()
    local ret = run("opkg list-upgradable")
    return true, ret
end
function opkg_install(package)
    local ret = run("opkg install "..package.. " --force-overwrite 2>&1" ) -- to fix
    return true, ret
end
function opkg_remove(package)
    local ret = run("opkg remove "..package )
    return true, ret
end
function upgrade()
    local packages = {'overthebox', 'mptcp', 'netifd', 'luci-base', 'luci-mod-admin-full', 'luci-app-overthebox',     'mwan3otb', 'luci-app-mwan3otb', 'shadowsocks-libev', 'bosun', 'luci-theme-ovh', 'dnsmasq-full', 'sqm-scripts', 'luci-app-sqm', 'e2fsprogs', 'e2freefrag', 'dumpe2fs', 'resize2fs', 'tune2fs', 'libsodium', 'glorytun', 'glorytun-udp', 'rdisc6'}
    local unwantedPackages = {'luci-app-qos', 'qos-scripts'}
    local retcode = true
    local ret = "install:\n"
    for i = 1, #packages do
        -- install package
        local p = packages[i]
        local c, r = opkg_install(p)
        if c == false then
            retcode = false
        end
        ret = ret ..  p .. ": \n" .. r .."\n"
    end

    ret = ret .. "\nuninstall:\n"
    for i = 1, #unwantedPackages do
        -- install package
        local p = unwantedPackages[i]
        local c, r = opkg_remove(p)
        if c == false then
            retcode = false
        end
        ret = ret ..  p .. ": \n" .. r .."\n"
    end

    return retcode, ret
end

-- function run execute a program
-- return stdout and status code
function run(command)
    local handle = io.popen(command)
    local result = handle:read("*a")
    local rc = {handle:close()}
    return result, rc[4]
end

function sysupgrade()
    local ret = run("overthebox_last_upgrade -f")
    return true, ret
end
function reboot()
    local ret = run("reboot")
    return true, ret
end

function confirm_action(action, status, msg )
    if action == nil then
        return false, {error = "Can't confirm a nil action"}
    end
    if msg == nil then
        msg = ""
    end
    if status == nil then
        status = "error"
    end

    local rcode, res = POST('devices/'..uci.cursor():get("overthebox", "me", "device_id", {}).."/actions/"..action,   {status=status, details = msg})

    return (rcode == 200), res
end

function tprint (tbl, indent)
    if not indent then indent = 0 end
    if not tbl then return end
    for k, v in pairs(tbl) do
        formatting = string.rep("  ", indent) .. k .. ": "
        if type(v) == "table" then
            print(formatting)
            tprint(v, indent+1)
        elseif type(v) == 'boolean' then
            print(formatting .. tostring(v))
        else
            print(formatting .. v)
        end
    end
end

-- base API helpers
function GET(uri)
    return API(uri, "GET", nil)
end

function POST(uri, data)
    return API(uri, "POST", data)
end


function API(uri, method, data)
    url = api_url .. uri

    -- Buildin JSON POST
    local reqbody   = json.encode(data)
    local respbody  = {}
    -- Building Request
    http.TIMEOUT=5
    local body, code, headers, status = https.request{
        method = method,
        url = url,
        protocol = "tlsv1",
        headers =
        {
            ["Content-Type"] = "application/json",
            ["Content-length"] = reqbody:len(),
            ["X-Auth-OVH"] = uci.cursor():get("overthebox", "me", "token"),
            ["X-Overthebox-Version"] = VERSION
        },
        source = ltn12.source.string(reqbody),
        sink = ltn12.sink.table(respbody),
    }
    -- Parsing response
    -- Parsing json response

    if debugmode then
        print(method .. " " ..url)
        print('headers:')
        tprint(headers)
        print('reqbody:' .. reqbody)
        print('body:' .. tostring(table.concat(respbody)))
        print('code:' .. tostring(code))
        print('status:' .. tostring(status))
        print()
    end

    return code, json.decode(table.concat(respbody))
end

running = true
debugmode = true

while running do
	local rcode, ret = status()
	if rcode == 401 then
        running = false
	elseif rcode == 200 and ret.action then
		local actionreturn
		local msg
		debug("I do : "..ret.action)

		if ret.action == "upgrade" then
			if ret.arguments and ret.arguments.release_channel then
				if not check_release_channel( ret.arguments.release_channel ) then
					update_release_channel()
				end
			end
			actionreturn, msg = opkg_update()
			actionreturn, tmsg = upgrade()
			msg = msg .. "\n" .. tmsg
		elseif ret.action == "updateReleaseChannel" then
			actionreturn, msg = update_release_channel()
		elseif ret.action == "sysupgrade" then
			sysupgrade()
			running = false
		elseif ret.action == "reboot" then
			backup_last_action(ret.id)
			reboot()
			running = false
			msg = "ok"
		elseif ret.action == "wait" then
			running = false
			msg = ""
		else
			running = false
			actionreturn = false
			msg = {error = "Unknown action: "..ret.action}
		end

		if actionreturn ~= nil then
			if actionreturn == true then
				actionreturn = "done"
			elseif actionreturn == false then
				debug("Failed to do "..ret.action)
				actionreturn = "error"
				-- If there was an error, the message should be in the error field
				if msg.error ~= nil then
					msg = msg.error
				else
					msg = "OTB Unknown error"
				end
				debug("Got error: "..msg)
			end
			checkConfirm, errTab = confirm_action(ret.id, actionreturn, msg)
			if checkConfirm == false then
				if errTab == nil or errTab.error == nil then
					errMsg = "OTB Unknown error while updating action"
				else
					errMsg = errTab.error
				end
				debug("Error while updating action: ".. errMsg)
			end
		end
    else
        running = false
	end
end


